package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Collection;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class AnnotationUseFuncTest {
    @interface XmlElement {
        String value();

        String ns();
    }

    interface XmlElementW extends IJAnnotationWriter<AnnotationUseFuncTest.XmlElement> {
        public abstract AnnotationUseFuncTest.XmlElementW value(String s);

        public abstract AnnotationUseFuncTest.XmlElementW ns(String s);
    }

    @Test(timeout = 10000)
    public void testMain() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain__21 = use.param("value", ec);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        JAnnotationUse o_testMain__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__33 = aUse.param("name", "book");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        JAnnotationUse o_testMain__34 = aUse.param("targetNamespace", 5);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        JAnnotationUse o_testMain__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__59 = myuse.param("junk", 7);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        JAnnotationUse o_testMain__60 = myuse.param("value-value");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
    }

    @Test(timeout = 10000)
    public void testMain_rv718() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_525 = '8';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv718__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv718__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv718__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv718__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv718__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv718__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv718__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv718__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv718__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv718__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv718__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv718__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv718__65 = __DSPOT_invoc_39.param(__DSPOT_cValue_525);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv718__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv718__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv718__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv718__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv718__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv718__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv718__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv718__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv616() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_387 = new double[]{ 0.42612693332654983, 0.9053257972690202 };
        String __DSPOT_sName_386 = "n4Y#_=2(^ZtA&wJD0X/#";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv616__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv616__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv616__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv616__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv616__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_23 = use.param("value1", RetentionPolicy.RUNTIME);
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv616__37 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv616__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv616__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv616__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv616__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv616__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv616__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv616__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv616__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv616__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv616__66 = __DSPOT_invoc_23.paramArray(__DSPOT_sName_386, __DSPOT_aValues_387);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv616__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv616__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv616__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv616__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv616__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv616__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv757() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_559 = new AbstractJType[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv757__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv757__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv757__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv757__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv757__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv757__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv757__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv757__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv757__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv757__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv757__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv757__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv757__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_559);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv757__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv757__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv757__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv757__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv757__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv757__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv757__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv757__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv758() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_560 = new IJExpression[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv758__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv758__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv758__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv758__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv758__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv758__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv758__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv758__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv758__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv758__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv758__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv758__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv758__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_560);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv758__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv758__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv758__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv758__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv758__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv758__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv758__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv758__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv678() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_467 = -126;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv678__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv678__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv678__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv678__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv678__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv678__65 = __DSPOT_invoc_35.param(__DSPOT_nValue_467);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv678__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv656() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_441 = new AbstractJType[]{  };
        String __DSPOT_sName_440 = "AJLeJF|k#yzb011,aR/,";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv656__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv656__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv656__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv656__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv656__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv656__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv656__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv656__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv656__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv656__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv656__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv656__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv656__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv656__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv656__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv656__66 = __DSPOT_invoc_34.paramArray(__DSPOT_sName_440, __DSPOT_aValues_441);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv656__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv656__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv656__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv656__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv656__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv656__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv733() throws JClassAlreadyExistsException {
        int[] __DSPOT_aValues_540 = new int[]{ 2117466780, 1044424129 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv733__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv733__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv733__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv733__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv733__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv733__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv733__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv733__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv733__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv733__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv733__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv733__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv733__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_540);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv733__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv733__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv733__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv733__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv733__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv733__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv733__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv733__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv657() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_443 = new IJExpression[0];
        String __DSPOT_sName_442 = "%cT(Qx#R_2M%>[bF%=nK";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv657__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv657__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv657__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv657__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv657__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv657__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv657__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv657__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv657__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv657__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv657__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv657__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv657__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv657__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv657__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv657__66 = __DSPOT_invoc_34.paramArray(__DSPOT_sName_442, __DSPOT_aValues_443);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv657__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv657__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv657__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv657__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv657__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv657__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg237() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg237__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg237__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testMain_mg237__62 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isError());
        Assert.assertNull(((JTypeWildcard) (o_testMain_mg237__62)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testMain_mg237__62)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JTypeWildcard) (o_testMain_mg237__62)).isReference());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg313() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg313__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg313__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg313__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg313__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg313__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg313__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg313__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg313__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg313__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg313__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg313__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, JFieldVar> o_testMain_mg313__62 = enumcls.fields();
        Assert.assertTrue(o_testMain_mg313__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg313__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg313__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg313__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg313__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg313__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg313__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg318() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg318__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg318__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg318__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        enumcls.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg317() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg317__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg317__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg317__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg317__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg317__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg317__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg317__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg317__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg317__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg317__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg317__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testMain_mg317__62 = enumcls.headerComment();
        Assert.assertTrue(o_testMain_mg317__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg317__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg317__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg317__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg317__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg317__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg317__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg272() throws JClassAlreadyExistsException {
        int __DSPOT_nValue_38 = -754815419;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg272__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg272__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg272__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg272__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg272__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg272__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg272__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg272__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg272__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg272__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg272__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg272__63 = use.param(__DSPOT_nValue_38);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__63)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg272__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg272__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg272__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg272__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg272__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg272__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv688() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_482 = 0.14266153F;
        String __DSPOT_sName_481 = "j14:$ DHZ6L`,d@wRA<.";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv688__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv688__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv688__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv688__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv688__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv688__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv688__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv688__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv688__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv688__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv688__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv688__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv688__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv688__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv688__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv688__66 = __DSPOT_invoc_35.param(__DSPOT_sName_481, __DSPOT_fValue_482);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv688__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv688__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv688__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv688__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv688__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv688__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg373() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_128 = 0.4628432931439854;
        String __DSPOT_sName_127 = "maZJcf{Y<x-zr2#$hDLf";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg373__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg373__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg373__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg373__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg373__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg373__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg373__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg373__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg373__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg373__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg373__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg373__64 = aUse.param(__DSPOT_sName_127, __DSPOT_dValue_128);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__64)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg373__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg373__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg373__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg373__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg373__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg373__62)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg230() throws JClassAlreadyExistsException {
        String __DSPOT_sMessage_14 = "Nw]f4QDhB+ _ 2&pb?56";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg230__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg230__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg230__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg230__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg230__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg230__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg230__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg230__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg230__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg230__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg230__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JErrorClass o_testMain_mg230__63 = cm.errorClass(__DSPOT_sMessage_14);
        Assert.assertFalse(((JErrorClass) (o_testMain_mg230__63)).isInterface());
        Assert.assertFalse(((JErrorClass) (o_testMain_mg230__63)).isAbstract());
        Assert.assertEquals("Nw]f4QDhB+ _ 2&pb?56", ((JErrorClass) (o_testMain_mg230__63)).getMessage());
        Assert.assertTrue(((JErrorClass) (o_testMain_mg230__63)).isError());
        Assert.assertNull(((JErrorClass) (o_testMain_mg230__63)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testMain_mg230__63)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JErrorClass) (o_testMain_mg230__63)).isParameterized());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testMain_mg230__63)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JErrorClass) (o_testMain_mg230__63)).isReference());
        Assert.assertFalse(((JErrorClass) (o_testMain_mg230__63)).isArray());
        Assert.assertFalse(((JErrorClass) (o_testMain_mg230__63)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg230__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg230__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg230__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg230__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg230__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg230__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv783() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_580 = new boolean[]{ true };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv783__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv783__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv783__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv783__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv783__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv783__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv783__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv783__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv783__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv783__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv783__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv783__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv783__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_580);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv783__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv783__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv783__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv783__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv783__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv783__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv783__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv783__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv781() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_578 = 573067598L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv781__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv781__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv781__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv781__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv781__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv781__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv781__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv781__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv781__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv781__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv781__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv781__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv781__65 = __DSPOT_invoc_41.param(__DSPOT_nValue_578);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv781__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv781__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv781__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv781__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv781__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv781__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv781__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv781__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_literalMutationString95_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testMain_literalMutationString95 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_rv608() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_372 = -26822;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv608__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv608__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv608__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv608__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv608__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_23 = use.param("value1", RetentionPolicy.RUNTIME);
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv608__36 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv608__37 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv608__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv608__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv608__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv608__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv608__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv608__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv608__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv608__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv608__65 = __DSPOT_invoc_23.param(__DSPOT_nValue_372);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv608__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv608__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv608__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__37)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv608__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv608__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv608__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMainnull503_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray(null);
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testMainnull503 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_rv826() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_627 = new boolean[]{ true, false, false };
        String __DSPOT_sName_626 = "O.7^Hdq9c%#gPN-lk(zs";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv826__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv826__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv826__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv826__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv826__66 = __DSPOT_invoc_42.paramArray(__DSPOT_sName_626, __DSPOT_aValues_627);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv826__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv727() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_534 = new char[]{ 'Z' };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv727__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv727__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv727__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv727__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv727__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv727__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv727__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv727__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv727__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_534);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv727__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv900() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_726 = false;
        String __DSPOT_sName_725 = "cBEu#P/,w[il`jzs}>*e";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv900__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv900__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv900__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv900__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv900__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv900__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv900__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv900__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv900__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv900__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv900__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv900__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv900__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv900__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv900__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv900__66 = __DSPOT_invoc_50.param(__DSPOT_sName_725, __DSPOT_bValue_726);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv900__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv900__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv900__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv900__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv900__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv900__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv866() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_683 = -499786595L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv866__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv866__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv866__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv866__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv866__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv866__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv866__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv866__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv866__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv866__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv866__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv866__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv866__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv866__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv866__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv866__65 = __DSPOT_invoc_47.param(__DSPOT_nValue_683);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv866__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv866__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv866__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv866__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv866__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv866__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv701() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_505 = new JEnumConstant[]{  };
        String __DSPOT_sName_504 = ":[kK]A!BJ>|;uK1dA_[m";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv701__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv701__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv701__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv701__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv701__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv701__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv701__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv701__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv701__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv701__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv701__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv701__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv701__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv701__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv701__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv701__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_504, __DSPOT_aValues_505);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv701__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv701__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv701__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv701__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv701__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv701__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv767() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_569 = new short[]{ -3739 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv767__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv767__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv767__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv767__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv767__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv767__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv767__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv767__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv767__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_569);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv767__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv767__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv767__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv767__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv767__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv908() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_742 = -23375;
        String __DSPOT_sName_741 = "U4Y/4LsTv2!:d9e$lX2:";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv908__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv908__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv908__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv908__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv908__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv908__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv908__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv908__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv908__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv908__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv908__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv908__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv908__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv908__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv908__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv908__66 = __DSPOT_invoc_50.param(__DSPOT_sName_741, __DSPOT_nValue_742);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv908__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv908__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv908__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv908__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv908__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv908__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv708() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_519 = new long[]{ -1937530940L, -1648026491L, -1613863730L };
        String __DSPOT_sName_518 = "OBe#(&QN9/*41o}!0Wn<";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv708__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv708__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv708__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv708__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv708__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv708__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv708__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv708__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv708__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv708__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv708__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv708__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv708__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv708__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv708__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv708__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_518, __DSPOT_aValues_519);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv708__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv708__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv708__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv708__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv708__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv708__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv709() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_521 = new short[]{ -21215, 5393, 5614 };
        String __DSPOT_sName_520 = "ohN#bUwM2fXs,Xbq-We!";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv709__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv709__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv709__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv709__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv709__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv709__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv709__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv709__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv709__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv709__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv709__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv709__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv709__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv709__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv709__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv709__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_520, __DSPOT_aValues_521);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv709__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv709__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv709__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv709__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv709__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv709__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg269() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_35 = 'P';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg269__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg269__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg269__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg269__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg269__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg269__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg269__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg269__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg269__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg269__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg269__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg269__63 = use.param(__DSPOT_cValue_35);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__63)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg269__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg269__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg269__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg269__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg269__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg269__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg445() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_213 = new Class<?>[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg445__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg445__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg445__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg445__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg445__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg445__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg445__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg445__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg445__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg445__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg445__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg445__63 = arrayMember2.params(__DSPOT_aValues_213);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg445__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg445__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg445__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg445__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg445__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg445__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg404() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_175 = 0.30510113F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg404__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg404__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg404__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg404__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg404__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg404__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg404__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg404__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg404__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg404__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg404__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg404__63 = arrayMember.param(__DSPOT_fValue_175);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg404__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg404__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg404__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg404__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg404__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg404__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg329() throws JClassAlreadyExistsException {
        Object __DSPOT_o_99 = new Object();
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg329__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg329__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg329__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg329__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg329__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg329__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg329__64 = ec.equals(__DSPOT_o_99);
        Assert.assertFalse(o_testMain_mg329__64);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg329__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg482() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_265 = new float[0];
        String __DSPOT_sName_264 = "W`h79`wVYde!kAeH-.^d";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg482__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg482__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg482__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg482__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg482__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg482__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg482__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg482__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg482__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg482__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg482__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isError());
        o_testMain_mg482__62.getAnnotationMembers();
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg482__64 = myuse.paramArray(__DSPOT_sName_264, __DSPOT_aValues_265);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__64)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg482__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg482__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg482__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg482__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg482__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg482__62)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv775() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_572 = -35;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv775__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv775__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv775__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv775__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv775__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv775__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv775__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv775__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv775__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv775__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv775__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv775__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv775__65 = __DSPOT_invoc_41.param(__DSPOT_nValue_572);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv775__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv775__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv775__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv775__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv775__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv775__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv775__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv775__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv677() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_466 = true;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv677__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv677__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv677__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv677__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv677__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv677__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv677__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv677__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv677__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv677__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv677__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv677__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv677__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv677__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv677__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv677__65 = __DSPOT_invoc_35.param(__DSPOT_bValue_466);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv677__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv677__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv677__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv677__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv677__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv677__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv697() throws JClassAlreadyExistsException {
        byte[] __DSPOT_aValues_497 = new byte[]{ 30, -25 };
        String __DSPOT_sName_496 = "`f*8U&lNc$=$JI<B[&L]";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv697__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv697__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv697__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv697__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv697__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv697__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv697__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv697__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv697__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv697__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv697__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv697__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv697__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv697__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv697__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv697__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_496, __DSPOT_aValues_497);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv697__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv697__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv697__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv697__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv697__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv697__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv551() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_289 = 0.5737441090827072;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv551__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv551__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv551__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv551__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv551__25 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__25)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv551__36 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv551__37 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv551__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv551__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv551__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv551__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv551__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv551__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv551__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv551__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv551__65 = __DSPOT_invoc_22.param(__DSPOT_dValue_289);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv551__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv551__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv551__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__25)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__25)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__37)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv551__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv551__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv551__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg442() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_210 = new double[]{ 0.9922048063276573, 0.2532785093327442, 0.042207835061504606 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg442__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg442__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg442__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg442__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg442__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg442__63 = arrayMember2.params(__DSPOT_aValues_210);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg442__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv750() throws JClassAlreadyExistsException {
        int __DSPOT_nValue_552 = 1719154376;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv750__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv750__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv750__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv750__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv750__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv750__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv750__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv750__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv750__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv750__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv750__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv750__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv750__65 = __DSPOT_invoc_40.param(__DSPOT_nValue_552);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv750__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv750__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv750__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv750__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv750__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv750__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv750__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv750__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg367() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_118 = 0.4400902F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg367__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg367__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg367__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg367__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg367__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg367__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg367__63 = aUse.param(__DSPOT_fValue_118);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg367__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationMembers().isEmpty());
    }
}

