package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class NestedClassFuncTest {
    @Test(timeout = 10000)
    public void testBasic() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testBasic__6)).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testBasic__6)).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg39() throws Exception {
        String __DSPOT_sFullyQualifiedClassName_18 = "Jum&)<4oK[>Va&1`i[aM";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg39__7 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg39__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg39__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg39__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg39__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg39__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg39__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testBasic_mg39__10 = cm.ref(__DSPOT_sFullyQualifiedClassName_18);
        Assert.assertEquals(-698840616, ((int) (((JDirectClass) (o_testBasic_mg39__10)).hashCode())));
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isAbstract());
        Assert.assertTrue(((JDirectClass) (o_testBasic_mg39__10)).isClass());
        Assert.assertNull(((JDirectClass) (o_testBasic_mg39__10)).getOuter());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isAnonymous());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isInterface());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isPackage());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isParameterized());
        Assert.assertTrue(((Collection) (((JDirectClass) (o_testBasic_mg39__10)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDirectClass) (o_testBasic_mg39__10)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDirectClass(Jum&)<4oK[>Va&1`i[aM)", ((JDirectClass) (o_testBasic_mg39__10)).toString());
        Assert.assertTrue(((Collection) (((JDirectClass) (o_testBasic_mg39__10)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDirectClass) (o_testBasic_mg39__10)).isReference());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isArray());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isPrimitive());
        Assert.assertFalse(((JDirectClass) (o_testBasic_mg39__10)).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg39__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg39__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg39__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg39__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg39__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg39__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg39__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg39__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg39__7)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg36() throws Exception {
        String __DSPOT_sName_16 = "Vt2Y][1u)p]QM-k,I]-r";
        String __DSPOT_sMessage_15 = "*J8r}4@(!YL#ZQsb>_1J";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg36__8 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg36__8)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg36__8)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg36__8)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg36__8)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg36__8)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg36__8)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JErrorClass o_testBasic_mg36__11 = cm.errorClass(__DSPOT_sMessage_15, __DSPOT_sName_16);
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg36__11)).isInterface());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg36__11)).isAbstract());
        Assert.assertEquals("*J8r}4@(!YL#ZQsb>_1J", ((JErrorClass) (o_testBasic_mg36__11)).getMessage());
        Assert.assertTrue(((JErrorClass) (o_testBasic_mg36__11)).isError());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg36__11)).isParameterized());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testBasic_mg36__11)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JErrorClass) (o_testBasic_mg36__11)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testBasic_mg36__11)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JErrorClass) (o_testBasic_mg36__11)).isReference());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg36__11)).isArray());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg36__11)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg36__8)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg36__8)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg36__8)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg36__8)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg36__8)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg36__8)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg36__8)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg36__8)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg36__8)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg35() throws Exception {
        String __DSPOT_sMessage_14 = "t lGvSzxk?Yw`yc.L`HJ";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg35__7 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg35__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg35__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg35__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg35__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg35__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg35__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JErrorClass o_testBasic_mg35__10 = cm.errorClass(__DSPOT_sMessage_14);
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg35__10)).isInterface());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg35__10)).isAbstract());
        Assert.assertEquals("t lGvSzxk?Yw`yc.L`HJ", ((JErrorClass) (o_testBasic_mg35__10)).getMessage());
        Assert.assertTrue(((JErrorClass) (o_testBasic_mg35__10)).isError());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg35__10)).isParameterized());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testBasic_mg35__10)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JErrorClass) (o_testBasic_mg35__10)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JErrorClass) (o_testBasic_mg35__10)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JErrorClass) (o_testBasic_mg35__10)).isReference());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg35__10)).isArray());
        Assert.assertFalse(((JErrorClass) (o_testBasic_mg35__10)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg35__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg35__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg35__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg35__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg35__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg35__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg35__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg35__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg35__7)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_literalMutationNumber15_failAssert0() throws Exception {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass c = cm._package("foo")._class(-1, "Foo");
            c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testBasic_literalMutationNumber15 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testBasic_mg33() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg33__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg33__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg33__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg33__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg33__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg33__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg33__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        int o_testBasic_mg33__9 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testBasic_mg33__9)));
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg33__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg33__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg33__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg33__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg33__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg33__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg33__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg33__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg33__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg43() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg43__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg43__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg43__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg43__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg43__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg43__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg43__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testBasic_mg43__9 = c._extends();
        Assert.assertFalse(((JReferencedClass) (o_testBasic_mg43__9)).isParameterized());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testBasic_mg43__9)).getAllInnerClasses())).isEmpty());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(com.helger.jcodemodel.NestedClassFuncTest.MockInnerClass)", ((JReferencedClass) (o_testBasic_mg43__9)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testBasic_mg43__9)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JReferencedClass) (o_testBasic_mg43__9)).isReference());
        Assert.assertFalse(((JReferencedClass) (o_testBasic_mg43__9)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testBasic_mg43__9)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testBasic_mg43__9)).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg43__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg43__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg43__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg43__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg43__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg43__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg43__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg43__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg43__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_rv83() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass __DSPOT_invoc_6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, JFieldVar> o_testBasic_rv83__11 = __DSPOT_invoc_6.fields();
        Assert.assertTrue(o_testBasic_rv83__11.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg32() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg32__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg32__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg32__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg32__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg32__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg32__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg32__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testBasic_mg32__9 = cm.buildsErrorTypeRefs();
        Assert.assertFalse(o_testBasic_mg32__9);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg32__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg32__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg32__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg32__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg32__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg32__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg32__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg32__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg32__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_rv82() throws Exception {
        String __DSPOT_sName_33 = "(*fl<xJgehgad?HCt1H=";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass __DSPOT_invoc_6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        CodeModelTestsHelper.parseCodeModel(cm);
        JEnumConstant o_testBasic_rv82__12 = __DSPOT_invoc_6.enumConstant(__DSPOT_sName_33);
        Assert.assertFalse(((JEnumConstant) (o_testBasic_rv82__12)).hasArgs());
        Assert.assertEquals(1604236262, ((int) (((JEnumConstant) (o_testBasic_rv82__12)).hashCode())));
        Assert.assertEquals("foo.Foo.(*fl<xJgehgad?HCt1H=", ((JEnumConstant) (o_testBasic_rv82__12)).getName());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg42() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg42__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg42__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg42__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg42__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg42__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg42__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg42__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testBasic_mg42__9 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isError());
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isParameterized());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testBasic_mg42__9)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testBasic_mg42__9)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testBasic_mg42__9)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testBasic_mg42__9)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JTypeWildcard) (o_testBasic_mg42__9)).isReference());
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testBasic_mg42__9)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg42__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg42__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg42__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg42__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg42__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg42__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg42__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg42__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg42__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_rv74() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass __DSPOT_invoc_6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testBasic_rv74__11 = __DSPOT_invoc_6.annotations();
        Assert.assertTrue(o_testBasic_rv74__11.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_rv96() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass __DSPOT_invoc_6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testBasic_rv96__11 = __DSPOT_invoc_6.mods();
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isStrictFP());
        Assert.assertEquals(0, ((int) (((JMods) (o_testBasic_rv96__11)).getValue())));
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isAbstract());
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isDefault());
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isStatic());
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isNative());
        Assert.assertFalse(((JMods) (o_testBasic_rv96__11)).isSynchronized());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg51() throws Exception {
        String __DSPOT_sName_21 = "A!L#vK5WR{oE1L&q_{{l";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg51__7 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg51__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg51__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg51__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg51__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg51__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg51__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testBasic_mg51__10 = c.containsField(__DSPOT_sName_21);
        Assert.assertFalse(o_testBasic_mg51__10);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg51__7)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg51__7)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg51__7)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg51__7)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg51__7)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg51__7)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg51__7)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg51__7)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg51__7)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg50() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg50__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg50__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg50__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg50__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg50__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg50__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg50__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testBasic_mg50__9 = c.containsErrorTypes();
        Assert.assertFalse(o_testBasic_mg50__9);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        ((JDefinedClass) (c)).getOuter().getPackage().isUnnamed();
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg50__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg50__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg50__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg50__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg50__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg50__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg50__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg50__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg50__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_mg60() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass o_testBasic_mg60__6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg60__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg60__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg60__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg60__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg60__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg60__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        c.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg60__6)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg60__6)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testBasic_mg60__6)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testBasic_mg60__6)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isPackage());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg60__6)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (o_testBasic_mg60__6)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (o_testBasic_mg60__6)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testBasic_mg60__6)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (o_testBasic_mg60__6)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testBasic_mg60__6)).isError());
    }

    @Test(timeout = 10000)
    public void testBasic_rv88() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass c = cm._package("foo")._class(0, "Foo");
        Assert.assertFalse(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
        JDefinedClass __DSPOT_invoc_6 = c._extends(cm.ref(NestedClassFuncTest.MockInnerClass.class));
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testBasic_rv88__11 = __DSPOT_invoc_6.headerComment();
        Assert.assertTrue(o_testBasic_rv88__11.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (c)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (c)).isHidden());
        Assert.assertTrue(((JDefinedClass) (c)).isClass());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (c)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (c)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (c)).isAnonymous());
        Assert.assertFalse(((JDefinedClass) (c)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (c)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (c)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (c)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (c)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isPackage());
        Assert.assertFalse(((JDefinedClass) (c)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getAllInnerClasses())).isEmpty());
        Assert.assertNull(((JDefinedClass) (c)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Foo)", ((JDefinedClass) (c)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (c)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (c)).isReference());
        Assert.assertFalse(((JDefinedClass) (c)).isArray());
        Assert.assertFalse(((JDefinedClass) (c)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (c)).isError());
    }

    public static class MockInnerClass {}
}

