package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;


public final class AnnotationUseFuncTest {
    @interface XmlElement {
        String value();

        String ns();
    }

    interface XmlElementW extends IJAnnotationWriter<AnnotationUseFuncTest.XmlElement> {
        public abstract AnnotationUseFuncTest.XmlElementW value(String s);

        public abstract AnnotationUseFuncTest.XmlElementW ns(String s);
    }

    @Test(timeout = 10000)
    public void testMain() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain__21 = use.param("value", ec);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        JAnnotationUse o_testMain__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__33 = aUse.param("name", "book");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        JAnnotationUse o_testMain__34 = aUse.param("targetNamespace", 5);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        JAnnotationUse o_testMain__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__59 = myuse.param("junk", 7);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        JAnnotationUse o_testMain__60 = myuse.param("value-value");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
    }

    @Test(timeout = 10000)
    public void testMain_rv916() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_755 = new IJExpression[]{  };
        String __DSPOT_sName_754 = "ex#Z^J-/RS8h65%8_O03";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv916__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv916__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv916__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv916__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv916__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv916__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv916__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv916__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv916__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv916__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv916__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv916__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv916__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv916__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv916__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv916__66 = __DSPOT_invoc_50.paramArray(__DSPOT_sName_754, __DSPOT_aValues_755);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv916__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv916__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv916__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv916__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv916__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv916__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv814() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_606 = true;
        String __DSPOT_sName_605 = "f3mBUdZo;EF|u,%buboy";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv814__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv814__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv814__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv814__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv814__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv814__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv814__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv814__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv814__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv814__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv814__66 = __DSPOT_invoc_42.param(__DSPOT_sName_605, __DSPOT_bValue_606);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv814__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv814__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv814__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv814__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv814__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv814__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv815() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_608 = 115;
        String __DSPOT_sName_607 = "`qH;&N0t<Q&DDg$-,/&`";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv815__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv815__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv815__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv815__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv815__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv815__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv815__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv815__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv815__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv815__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv815__66 = __DSPOT_invoc_42.param(__DSPOT_sName_607, __DSPOT_nValue_608);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv815__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv815__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv815__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv815__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv815__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv815__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv518() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod __DSPOT_invoc_5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv518__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv518__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv518__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv518__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv518__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv518__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv518__62 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testMain_rv518__64 = __DSPOT_invoc_5.annotations();
        Assert.assertTrue(o_testMain_rv518__64.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv518__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv518__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv518__62)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv559() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_302 = 0.091226F;
        String __DSPOT_sName_301 = "B,I[.-yo_g9<Hkeqn{p}";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv559__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv559__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv559__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv559__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv559__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv559__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv559__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv559__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv559__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv559__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv559__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv559__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv559__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv559__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv559__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv559__66 = __DSPOT_invoc_22.param(__DSPOT_sName_301, __DSPOT_fValue_302);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv559__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv559__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv559__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__26)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv559__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv559__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv559__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv878() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_705 = new Class<?>[]{  };
        String __DSPOT_sName_704 = "^4IVe*cfhr{x]XSLitVi";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv878__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv878__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv878__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv878__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv878__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv878__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv878__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv878__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv878__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv878__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv878__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv878__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv878__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv878__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv878__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv878__66 = __DSPOT_invoc_47.paramArray(__DSPOT_sName_704, __DSPOT_aValues_705);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv878__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv878__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv878__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv878__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv878__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv878__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv912() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_747 = new boolean[]{ false, true, true };
        String __DSPOT_sName_746 = "y zNJo1Ouksq %9=__2u";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv912__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv912__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv912__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv912__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv912__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv912__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv912__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv912__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv912__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv912__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv912__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv912__66 = __DSPOT_invoc_50.paramArray(__DSPOT_sName_746, __DSPOT_aValues_747);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv912__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv912__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv912__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv912__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv912__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv777() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_574 = 0.7004013280835769;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv777__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv777__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv777__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv777__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv777__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv777__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv777__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv777__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv777__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv777__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv777__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv777__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv777__65 = __DSPOT_invoc_41.param(__DSPOT_dValue_574);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv777__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv777__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv777__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv777__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv777__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv777__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv777__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv777__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv535_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nIndex_281 = 806958827;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            JMethod __DSPOT_invoc_5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            __DSPOT_invoc_5.paramAtIndex(__DSPOT_nIndex_281);
            org.junit.Assert.fail("testMain_rv535 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected) {
            Assert.assertEquals("Index: 806958827, Size: 0", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_rv917() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_757 = new JEnumConstant[]{  };
        String __DSPOT_sName_756 = "{!^)btHA!9rPzZjFIPAa";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv917__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv917__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv917__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv917__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv917__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv917__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv917__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv917__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv917__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv917__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv917__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv917__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv917__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv917__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv917__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv917__66 = __DSPOT_invoc_50.paramArray(__DSPOT_sName_756, __DSPOT_aValues_757);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv917__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv917__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv917__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv917__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv917__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv917__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg306_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_89 = -1982770987;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            enumcls.constructor(__DSPOT_nMods_89);
            org.junit.Assert.fail("testMain_mg306 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testMain_mg457() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_223 = 6;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg457__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg457__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg457__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg457__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg457__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg457__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg457__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg457__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg457__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg457__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg457__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg457__63 = myuse.param(__DSPOT_nValue_223);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg457__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg457__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg457__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg457__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg457__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg457__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg458() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_224 = 'f';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg458__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg458__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg458__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg458__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg458__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg458__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg458__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg458__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg458__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg458__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg458__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg458__63 = myuse.param(__DSPOT_cValue_224);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg458__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg458__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg458__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg458__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg458__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg458__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg238() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg238__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg238__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg238__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg238__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg238__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg238__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg238__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg238__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg238__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg238__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg238__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testMain_mg238__62 = cls._extends();
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testMain_mg238__62)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg238__62)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testMain_mg238__62)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testMain_mg238__62)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JReferencedClass) (o_testMain_mg238__62)).isReference());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg238__62)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg238__62)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testMain_mg238__62)).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg238__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg238__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg238__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg238__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg238__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg238__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg414() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_185 = new JEnumConstant[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg414__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg414__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg414__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg414__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg414__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg414__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg414__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg414__63 = arrayMember.params(__DSPOT_aValues_185);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg414__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg414__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg414__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg414__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg414__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg436() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_204 = new boolean[]{ true };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg436__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg436__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg436__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg436__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg436__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg436__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg436__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg436__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg436__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg436__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg436__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg436__63 = arrayMember2.params(__DSPOT_aValues_204);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg436__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg436__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg436__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg436__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg436__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg436__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg318() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg318__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg318__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg318__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg318__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg318__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        enumcls.hide();
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg318__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg318__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg318__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg318__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg318__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv786() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_583 = new AbstractJType[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv786__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv786__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv786__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv786__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv786__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv786__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv786__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv786__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv786__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_583);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv786__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv564() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_311 = 726013616L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv564__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv564__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv564__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv564__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv564__25 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__25)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv564__36 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv564__37 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv564__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv564__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv564__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv564__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv564__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv564__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv564__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv564__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv564__65 = __DSPOT_invoc_22.param(__DSPOT_nValue_311);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv564__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv564__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv564__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__25)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__25)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv564__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv564__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv564__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv882() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_713 = new short[]{ -14493, 30796, -24594, 15430 };
        String __DSPOT_sName_712 = "^u%z@UD[NJ`(GNJ$!x/{";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv882__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv882__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv882__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv882__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv882__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv882__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv882__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv882__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv882__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv882__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv882__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv882__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv882__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv882__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv882__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv882__66 = __DSPOT_invoc_47.paramArray(__DSPOT_sName_712, __DSPOT_aValues_713);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv882__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv882__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv882__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv882__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv882__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv882__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg397() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg397__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg397__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg397__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg397__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg397__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg397__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg397__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg397__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg397__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg397__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg397__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testMain_mg397__62 = arrayMember.annotations();
        Assert.assertFalse(o_testMain_mg397__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg397__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg397__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg397__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg397__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg397__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg397__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMainnull508_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray(null);
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testMainnull508 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_mg355() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg355__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg355__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg355__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg355__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg355__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg355__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg355__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg355__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg355__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg355__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg355__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testMain_mg355__62 = field.javadoc();
        Assert.assertTrue(o_testMain_mg355__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg355__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg355__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg355__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg355__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg355__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg355__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv924() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_771 = new long[]{ 1277243622L, -848513725L, 209984178L, -561454632L };
        String __DSPOT_sName_770 = "wV3*r!]2^:mx<|+DB*`V";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv924__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv924__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv924__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv924__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv924__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv924__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv924__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv924__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv924__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv924__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv924__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv924__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv924__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv924__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv924__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv924__66 = __DSPOT_invoc_50.paramArray(__DSPOT_sName_770, __DSPOT_aValues_771);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv924__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv924__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv924__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv924__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv924__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv924__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv727() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_534 = new char[]{ 'Z' };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv727__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv727__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv727__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv727__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv727__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv727__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv727__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv727__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv727__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_534);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv727__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv727__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv727__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv727__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv727__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv724() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_531 = -3879;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv724__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv724__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv724__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv724__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv724__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv724__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv724__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv724__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv724__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv724__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv724__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv724__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv724__65 = __DSPOT_invoc_39.param(__DSPOT_nValue_531);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv724__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv724__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv724__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv724__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv724__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv724__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv724__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv724__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv945() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_790 = 'Y';
        String __DSPOT_sName_789 = "&)da1WGLR`6=x(Yr#r2j";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv945__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv945__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv945__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv945__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv945__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv945__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv945__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv945__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv945__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv945__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv945__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv945__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv945__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv945__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_60 = myuse.param("junk", 7);
        JAnnotationUse o_testMain_rv945__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv945__66 = __DSPOT_invoc_60.param(__DSPOT_sName_789, __DSPOT_cValue_790);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv945__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv945__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv945__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv945__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv945__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv945__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv747() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_549 = 'S';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv747__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv747__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv747__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv747__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv747__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv747__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv747__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv747__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv747__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv747__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv747__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv747__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv747__65 = __DSPOT_invoc_40.param(__DSPOT_cValue_549);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv747__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv747__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv747__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv747__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv747__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv747__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv747__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv747__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv568() throws JClassAlreadyExistsException {
        byte[] __DSPOT_aValues_317 = new byte[]{ -73, 112 };
        String __DSPOT_sName_316 = "p(XM{CFmTeGhyCnQJS`<";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv568__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv568__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv568__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv568__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv568__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv568__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv568__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv568__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv568__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv568__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv568__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv568__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv568__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv568__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv568__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv568__66 = __DSPOT_invoc_22.paramArray(__DSPOT_sName_316, __DSPOT_aValues_317);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv568__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv568__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv568__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__26)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv568__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv568__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv568__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv570() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_321 = new AbstractJType[]{  };
        String __DSPOT_sName_320 = "]!vbNw8.:<e2op^cl&xZ";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv570__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv570__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv570__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv570__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv570__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv570__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv570__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv570__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv570__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv570__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv570__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv570__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv570__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv570__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv570__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv570__66 = __DSPOT_invoc_22.paramArray(__DSPOT_sName_320, __DSPOT_aValues_321);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv570__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv570__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv570__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__26)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv570__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv570__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv570__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg401() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_172 = 61;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg401__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg401__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg401__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg401__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg401__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg401__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg401__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg401__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg401__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg401__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg401__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg401__63 = arrayMember.param(__DSPOT_nValue_172);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg401__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg401__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg401__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg401__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg401__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg401__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg326() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg326__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg326__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg326__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg326__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg326__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg326__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg326__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg326__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg326__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg326__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg326__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testMain_mg326__62 = ec.args();
        Assert.assertTrue(o_testMain_mg326__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg326__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg326__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg326__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg326__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg326__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg326__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg329() throws JClassAlreadyExistsException {
        Object __DSPOT_o_99 = new Object();
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg329__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg329__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg329__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg329__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg329__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg329__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg329__62 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg329__64 = ec.equals(__DSPOT_o_99);
        Assert.assertFalse(o_testMain_mg329__64);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg329__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg329__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg329__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg329__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg329__62)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv896() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_721 = 0.7536038472703414;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv896__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv896__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv896__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv896__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv896__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv896__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv896__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv896__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv896__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv896__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv896__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv896__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv896__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv896__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv896__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv896__65 = __DSPOT_invoc_50.param(__DSPOT_dValue_721);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv896__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv896__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv896__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv896__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv896__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv896__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv732() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_539 = new float[]{ 0.727717F, 0.18207656F, 0.43547815F, 0.9344437F };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv732__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv732__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv732__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv732__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv732__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv732__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv732__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv732__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv732__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv732__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv732__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv732__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv732__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_539);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv732__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv732__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv732__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv732__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv732__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv732__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv732__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv732__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv795() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_592 = new long[]{ 1494480403L, 669133148L, 1893097794L };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv795__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv795__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv795__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv795__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv795__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv795__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv795__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv795__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv795__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv795__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv795__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv795__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv795__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_592);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv795__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv795__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv795__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv795__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv795__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv795__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv795__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv795__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg440() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_208 = new IJExpression[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg440__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg440__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg440__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg440__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg440__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg440__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg440__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg440__63 = arrayMember2.params(__DSPOT_aValues_208);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg440__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg440__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg440__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg440__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg440__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg461() throws JClassAlreadyExistsException {
        int __DSPOT_nValue_227 = -821498237;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg461__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg461__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg461__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg461__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg461__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg461__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg461__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg461__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg461__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg461__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg461__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg461__63 = myuse.param(__DSPOT_nValue_227);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg461__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg461__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg461__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg461__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg461__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg461__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv1005() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_881 = new float[0];
        String __DSPOT_sName_880 = "QXk%HO9Gb#sRrjByv5%*";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv1005__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv1005__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv1005__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv1005__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv1005__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv1005__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv1005__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv1005__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv1005__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv1005__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv1005__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv1005__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv1005__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv1005__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv1005__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_61 = myuse.param("value-value");
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv1005__66 = __DSPOT_invoc_61.paramArray(__DSPOT_sName_880, __DSPOT_aValues_881);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv1005__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv1005__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv1005__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv1005__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv1005__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv1005__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv752() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_554 = -80338399L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv752__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv752__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv752__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv752__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv752__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv752__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv752__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv752__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv752__65 = __DSPOT_invoc_40.param(__DSPOT_nValue_554);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv752__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv796() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_593 = new short[]{ -24752, 10743 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv796__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv796__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv796__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv796__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv796__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv796__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv796__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv796__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv796__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv796__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv796__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv796__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv796__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_593);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv796__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv796__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv796__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv796__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv796__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv796__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv796__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv796__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg288() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_66 = new char[]{ ' ', 'G', '.' };
        String __DSPOT_sName_65 = "N(!P:(01(Vo/][%sGMuX";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg288__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg288__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg288__23 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__35 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__36 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg288__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg288__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__61 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg288__62 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg288__64 = use.paramArray(__DSPOT_sName_65, __DSPOT_aValues_66);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg288__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv573() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_327 = new double[]{ 0.3734387995495545, 0.395298912022396, 0.9510577981680692 };
        String __DSPOT_sName_326 = "=5zOkK&a$)LIMmqw=Ma ";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv573__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv573__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv573__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv573__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv573__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv573__37 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv573__38 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv573__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv573__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv573__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv573__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv573__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv573__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv573__63 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv573__64 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv573__66 = __DSPOT_invoc_22.paramArray(__DSPOT_sName_326, __DSPOT_aValues_327);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv573__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv573__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv573__7)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__26)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv573__44)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv573__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv573__64)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv651() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_432 = -17672;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv651__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv651__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv651__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv651__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv651__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv651__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv651__37 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv651__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv651__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv651__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv651__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv651__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv651__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv651__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv651__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv651__65 = __DSPOT_invoc_34.param(__DSPOT_nValue_432);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv651__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv651__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv651__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv651__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv651__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv651__63)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg367() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_118 = 0.4400902F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg367__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg367__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg367__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg367__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg367__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg367__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__60 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg367__61 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg367__63 = aUse.param(__DSPOT_fValue_118);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg367__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg367__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg367__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg367__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg367__61)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_mg323() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg323__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg323__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg323__21 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__33 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__34 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg323__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg323__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__59 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_mg323__60 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testMain_mg323__62 = enumcls.mods();
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isStrictFP());
        Assert.assertEquals(1, ((int) (((JMods) (o_testMain_mg323__62)).getValue())));
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isAbstract());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isDefault());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isStatic());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isNative());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isSynchronized());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg323__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isError());
    }

    @Test(timeout = 10000)
    public void testMain_rv792() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_589 = new Class<?>[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv792__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv792__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv792__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv792__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv792__22 = use.param("value", ec);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isError());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__34 = aUse.param("name", "book");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__35 = aUse.param("targetNamespace", 5);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv792__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv792__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv792__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv792__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv792__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isError());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv792__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isError());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__62 = myuse.param("junk", 7);
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isError());
        JAnnotationUse o_testMain_rv792__63 = myuse.param("value-value");
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isError());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv792__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_589);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv792__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv792__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv792__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv792__6)).isConstructor());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__23)).getAnnotationClass())).isError());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv792__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv792__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv792__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv792__63)).getAnnotationClass())).isError());
    }
}

