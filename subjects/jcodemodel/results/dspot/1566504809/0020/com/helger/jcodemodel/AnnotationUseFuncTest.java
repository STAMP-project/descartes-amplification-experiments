package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;


public final class AnnotationUseFuncTest {
    @interface XmlElement {
        String value();

        String ns();
    }

    interface XmlElementW extends IJAnnotationWriter<AnnotationUseFuncTest.XmlElement> {
        public abstract AnnotationUseFuncTest.XmlElementW value(String s);

        public abstract AnnotationUseFuncTest.XmlElementW ns(String s);
    }

    @Test(timeout = 10000)
    public void testMain() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain__21 = use.param("value", ec);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        JAnnotationUse o_testMain__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__33 = aUse.param("name", "book");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        JAnnotationUse o_testMain__34 = aUse.param("targetNamespace", 5);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        JAnnotationUse o_testMain__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        JAnnotationUse o_testMain__59 = myuse.param("junk", 7);
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        JAnnotationUse o_testMain__60 = myuse.param("value-value");
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain__5)).isConstructor());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__22)).hasAnnotationMembers());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__34)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain__40)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__41)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__41)).hasAnnotationMembers());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain__60)).hasAnnotationMembers());
    }

    @Test(timeout = 10000)
    public void testMain_rv717() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_524 = -94;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv717__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv717__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv717__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv717__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv717__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv717__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv717__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv717__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv717__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv717__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv717__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv717__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv717__65 = __DSPOT_invoc_39.param(__DSPOT_nValue_524);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv717__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv717__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv717__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv717__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv717__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv717__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv717__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv717__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv956() throws JClassAlreadyExistsException {
        byte[] __DSPOT_aValues_809 = new byte[]{ -13, -106, 99, -13 };
        String __DSPOT_sName_808 = "i(u22I!#m&{:-/38n(LZ";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv956__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv956__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv956__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv956__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv956__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv956__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv956__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv956__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv956__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv956__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv956__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv956__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv956__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv956__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_60 = myuse.param("junk", 7);
        JAnnotationUse o_testMain_rv956__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv956__66 = __DSPOT_invoc_60.paramArray(__DSPOT_sName_808, __DSPOT_aValues_809);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv956__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv956__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv956__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv956__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv956__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv956__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv678() throws JClassAlreadyExistsException {
        byte __DSPOT_nValue_467 = -126;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv678__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv678__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv678__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__41 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv678__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv678__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv678__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv678__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv678__65 = __DSPOT_invoc_35.param(__DSPOT_nValue_467);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv678__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv678__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv678__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv678__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv678__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv876() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_701 = new float[]{ 0.38034013F, 0.33337125F, 0.20773765F, 0.38222727F };
        String __DSPOT_sName_700 = "h9M8y-pP_2,OJTP_5b<&";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv876__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv876__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv876__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv876__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv876__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv876__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv876__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv876__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv876__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv876__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv876__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv876__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv876__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv876__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv876__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv876__66 = __DSPOT_invoc_47.paramArray(__DSPOT_sName_700, __DSPOT_aValues_701);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv876__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv876__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv876__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv876__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv876__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv876__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg335() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg335__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg335__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg335__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg335__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg335__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg335__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg335__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testMain_mg335__62 = ec1.args();
        Assert.assertTrue(o_testMain_mg335__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg335__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg335__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg335__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg335__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg335__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv643() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_418 = 'v';
        String __DSPOT_sName_417 = "yp([DypXWAgQD^/r %<0";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv643__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv643__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv643__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv643__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv643__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv643__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv643__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv643__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv643__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv643__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv643__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv643__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv643__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv643__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv643__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv643__66 = __DSPOT_invoc_34.param(__DSPOT_sName_417, __DSPOT_cValue_418);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv643__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv643__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv643__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv643__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv643__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv643__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv763() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_565 = new Class<?>[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv763__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv763__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv763__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv763__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv763__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv763__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv763__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv763__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv763__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv763__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv763__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv763__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv763__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_565);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv763__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv763__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv763__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv763__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv763__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv763__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv763__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv763__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMainnull496_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param(null, ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testMainnull496 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testMain_rv563() throws JClassAlreadyExistsException {
        short __DSPOT_nValue_310 = 19118;
        String __DSPOT_sName_309 = "(B%Q=,R/: .in5MN*PHX";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv563__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv563__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv563__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv563__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse __DSPOT_invoc_22 = use.param("value", ec);
        JAnnotationUse o_testMain_rv563__26 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv563__37 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv563__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv563__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv563__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv563__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv563__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv563__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv563__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv563__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv563__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv563__66 = __DSPOT_invoc_22.param(__DSPOT_sName_309, __DSPOT_nValue_310);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv563__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv563__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv563__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__26)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__26)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv563__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv563__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv563__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg254() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg254__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg254__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg254__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg254__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg254__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg254__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg254__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg254__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg254__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg254__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg254__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testMain_mg254__62 = cls.headerComment();
        Assert.assertTrue(o_testMain_mg254__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg254__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg254__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg254__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg254__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg254__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg254__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg331() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg331__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg331__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg331__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg331__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg331__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg331__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg331__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testMain_mg331__62 = ec.javadoc();
        Assert.assertTrue(o_testMain_mg331__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg331__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg331__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg331__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg331__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg331__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv809() throws JClassAlreadyExistsException {
        char __DSPOT_cValue_600 = 'Y';
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv809__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv809__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv809__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv809__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv809__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv809__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv809__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv809__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__41)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv809__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv809__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv809__65 = __DSPOT_invoc_42.param(__DSPOT_cValue_600);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv809__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv809__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv809__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv809__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv809__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv809__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg403() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_174 = 0.8716263419329757;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg403__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg403__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg403__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg403__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg403__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg403__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg403__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg403__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg403__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg403__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg403__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg403__63 = arrayMember.param(__DSPOT_dValue_174);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg403__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg403__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg403__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg403__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg403__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg403__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg243_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_20 = -266940695;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cls = cm._class("Test");
            cls.method(JMod.PUBLIC, cm.VOID, "foo");
            final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
            final JDefinedClass enumcls = cls._enum("Iamenum");
            final JEnumConstant ec = enumcls.enumConstant("GOOD");
            final JEnumConstant ec1 = enumcls.enumConstant("BAD");
            final JEnumConstant ec2 = enumcls.enumConstant("BAD");
            use.param("value", ec);
            use.param("value1", RetentionPolicy.RUNTIME);
            final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
            final JAnnotationUse aUse = field.annotate(Retention.class);
            aUse.param("name", "book");
            aUse.param("targetNamespace", 5);
            final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
            arrayMember.param("Bob");
            arrayMember.param("Rob");
            arrayMember.param("Ted");
            aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
            final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
            arrayMember2.annotate(Target.class).param("type", Integer.class);
            arrayMember2.annotate(Target.class).param("type", Float.class);
            final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
            w.ns("##default").value("foobar");
            final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
            myuse.param("junk", 7);
            myuse.param("value-value");
            CodeModelTestsHelper.parseCodeModel(cm);
            cls.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testMain_mg243 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testMain_rv699() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_501 = new AbstractJType[]{  };
        String __DSPOT_sName_500 = "LSgsM<P2/c-44h!,y)$>";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv699__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv699__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv699__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv699__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv699__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv699__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv699__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv699__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv699__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv699__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv699__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv699__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv699__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv699__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv699__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv699__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_500, __DSPOT_aValues_501);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv699__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv699__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv699__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv699__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv699__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv699__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv850() throws JClassAlreadyExistsException {
        boolean __DSPOT_bValue_658 = true;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv850__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv850__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv850__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv850__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv850__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv850__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv850__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv850__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv850__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv850__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv850__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv850__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        JAnnotationUse o_testMain_rv850__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv850__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv850__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv850__65 = __DSPOT_invoc_47.param(__DSPOT_bValue_658);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv850__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv850__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv850__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv850__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv850__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv850__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg288() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_66 = new char[]{ ' ', 'G', '.' };
        String __DSPOT_sName_65 = "N(!P:(01(Vo/][%sGMuX";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg288__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg288__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg288__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg288__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg288__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg288__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg288__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg288__64 = use.paramArray(__DSPOT_sName_65, __DSPOT_aValues_66);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__64)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg288__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg288__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg288__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg288__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg288__62)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg442() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_210 = new double[]{ 0.9922048063276573, 0.2532785093327442, 0.042207835061504606 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg442__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg442__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg442__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg442__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg442__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg442__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg442__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg442__63 = arrayMember2.params(__DSPOT_aValues_210);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg442__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg442__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg442__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg442__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg442__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg441() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_209 = new JEnumConstant[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg441__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg441__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg441__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg441__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg441__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg441__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg441__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg441__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg441__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg441__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg441__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg441__63 = arrayMember2.params(__DSPOT_aValues_209);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg441__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg441__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg441__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg441__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg441__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg441__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg246() throws JClassAlreadyExistsException {
        String __DSPOT_sName_21 = "|_k>]VY+z,lI:lZE.`#n";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg246__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg246__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg246__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg246__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg246__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg246__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg246__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg246__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg246__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg246__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg246__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg246__63 = cls.containsField(__DSPOT_sName_21);
        Assert.assertFalse(o_testMain_mg246__63);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg246__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg246__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg246__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg246__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg246__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg246__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg444() throws JClassAlreadyExistsException {
        int[] __DSPOT_aValues_212 = new int[]{ -1949939781, -1370191864, -1234807206, -628572517 };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg444__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg444__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg444__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg444__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg444__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg444__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg444__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg444__63 = arrayMember2.params(__DSPOT_aValues_212);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg444__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg444__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg444__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg444__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg444__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg323() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg323__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg323__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg323__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg323__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg323__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg323__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg323__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testMain_mg323__62 = enumcls.mods();
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isStrictFP());
        Assert.assertEquals(1, ((int) (((JMods) (o_testMain_mg323__62)).getValue())));
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isAbstract());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isDefault());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isStatic());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isNative());
        Assert.assertFalse(((JMods) (o_testMain_mg323__62)).isSynchronized());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg323__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg323__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg323__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg323__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg323__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg443() throws JClassAlreadyExistsException {
        float[] __DSPOT_aValues_211 = new float[]{ 0.5302585F };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg443__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg443__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg443__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg443__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg443__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg443__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg443__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg443__63 = arrayMember2.params(__DSPOT_aValues_211);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg443__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg443__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg443__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg443__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg443__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv737() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_544 = new long[]{ 2096736151L };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv737__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv737__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv737__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv737__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv737__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_39 = arrayMember.param("Bob");
        JAnnotationArrayMember o_testMain_rv737__42 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv737__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv737__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv737__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv737__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv737__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv737__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv737__65 = __DSPOT_invoc_39.params(__DSPOT_aValues_544);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv737__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv737__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv737__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv737__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv737__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv737__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv737__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv737__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg237() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg237__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg237__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg237__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg237__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg237__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testMain_mg237__62 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isError());
        Assert.assertNull(((JTypeWildcard) (o_testMain_mg237__62)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testMain_mg237__62)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testMain_mg237__62)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JTypeWildcard) (o_testMain_mg237__62)).isReference());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testMain_mg237__62)).isPrimitive());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg237__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg237__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg237__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg237__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg237__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv786() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aValues_583 = new AbstractJType[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv786__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv786__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv786__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv786__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv786__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv786__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv786__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv786__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv786__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_583);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv786__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv786__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv786__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv786__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv786__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv622() throws JClassAlreadyExistsException {
        long[] __DSPOT_aValues_399 = new long[]{ 1190812652L };
        String __DSPOT_sName_398 = "FHasgx%sgVPn5_N]Rma)";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv622__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv622__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv622__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv622__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv622__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_23 = use.param("value1", RetentionPolicy.RUNTIME);
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv622__37 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv622__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv622__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv622__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv622__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv622__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv622__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv622__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv622__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv622__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv622__66 = __DSPOT_invoc_23.paramArray(__DSPOT_sName_398, __DSPOT_aValues_399);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv622__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv622__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv622__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__37)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__37)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv622__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv622__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv622__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv787() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_584 = new IJExpression[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv787__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv787__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv787__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv787__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv787__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv787__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv787__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv787__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv787__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv787__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv787__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv787__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv787__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_584);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv787__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv787__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv787__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv787__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv787__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv787__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv787__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv787__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv982() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_841 = 0.7470151329661828;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv982__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv982__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv982__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv982__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv982__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv982__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv982__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv982__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv982__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv982__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv982__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_61 = myuse.param("value-value");
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv982__65 = __DSPOT_invoc_61.param(__DSPOT_dValue_841);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__65)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__65)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv982__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv982__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv982__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv982__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv982__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv663() throws JClassAlreadyExistsException {
        Enum<?>[] __DSPOT_aValues_455 = new Enum<?>[]{  };
        String __DSPOT_sName_454 = "M8a6@]?8h8whMovI#I|m";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv663__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv663__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv663__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv663__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv663__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv663__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv663__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv663__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv663__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv663__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv663__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray(null);
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv663__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv663__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv663__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv663__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv663__66 = __DSPOT_invoc_34.paramArray(__DSPOT_sName_454, __DSPOT_aValues_455);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv663__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv663__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv663__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv663__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv663__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv663__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg472() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_247 = -381916448L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg472__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg472__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg472__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg472__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg472__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg472__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg472__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg472__63 = myuse.param(__DSPOT_nValue_247);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__63)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg472__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg472__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg472__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg472__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg472__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg395() throws JClassAlreadyExistsException {
        short[] __DSPOT_aValues_169 = new short[]{ 28351 };
        String __DSPOT_sName_168 = "[ioj48!dh+bBYGG!0gGi";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg395__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg395__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg395__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg395__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg395__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg395__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg395__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg395__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg395__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg395__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg395__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg395__64 = aUse.paramArray(__DSPOT_sName_168, __DSPOT_aValues_169);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__64)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg395__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg395__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg395__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg395__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg395__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg395__62)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv785() throws JClassAlreadyExistsException {
        char[] __DSPOT_aValues_582 = new char[]{ 'f', '}', '^' };
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv785__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv785__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv785__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv785__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv785__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv785__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv785__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv785__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv785__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_41 = arrayMember.param("Ted");
        JAnnotationUse o_testMain_rv785__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv785__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv785__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv785__65 = __DSPOT_invoc_41.params(__DSPOT_aValues_582);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv785__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv785__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv785__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv785__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv785__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv785__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv785__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv785__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg431() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_199 = 0.9352738F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg431__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg431__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg431__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg431__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg431__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg431__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg431__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg431__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg431__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg431__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg431__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_mg431__63 = arrayMember2.param(__DSPOT_fValue_199);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__63)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg431__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg431__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg431__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg431__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg431__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg431__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv662() throws JClassAlreadyExistsException {
        Class<?>[] __DSPOT_aValues_453 = new Class<?>[]{  };
        String __DSPOT_sName_452 = "P&.ZuHnJBZ}O[]Ip/#WP";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv662__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv662__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv662__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv662__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv662__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv662__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_34 = aUse.param("name", "book");
        JAnnotationUse o_testMain_rv662__38 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv662__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv662__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv662__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv662__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv662__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv662__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv662__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv662__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv662__66 = __DSPOT_invoc_34.paramArray(__DSPOT_sName_452, __DSPOT_aValues_453);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv662__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv662__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv662__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__38)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__38)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv662__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv662__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv662__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv903() throws JClassAlreadyExistsException {
        double __DSPOT_dValue_732 = 0.282710777957225;
        String __DSPOT_sName_731 = "$GFAA%NPt)H]hdupZe_f";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv903__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv903__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv903__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv903__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv903__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv903__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv903__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv903__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv903__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv903__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv903__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv903__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv903__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv903__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv903__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv903__66 = __DSPOT_invoc_50.param(__DSPOT_sName_731, __DSPOT_dValue_732);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv903__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv903__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv903__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv903__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv903__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv903__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv947() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_794 = 0.19602434F;
        String __DSPOT_sName_793 = "#@!U`+!Kt5]@p|T!|<pz";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv947__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv947__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv947__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv947__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv947__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv947__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv947__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv947__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv947__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv947__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv947__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv947__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv947__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv947__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_60 = myuse.param("junk", 7);
        JAnnotationUse o_testMain_rv947__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv947__66 = __DSPOT_invoc_60.param(__DSPOT_sName_793, __DSPOT_fValue_794);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv947__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv947__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv947__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv947__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv947__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv947__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv826() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_627 = new boolean[]{ true, false, false };
        String __DSPOT_sName_626 = "O.7^Hdq9c%#gPN-lk(zs";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv826__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv826__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv826__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv826__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv826__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv826__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv826__66 = __DSPOT_invoc_42.paramArray(__DSPOT_sName_626, __DSPOT_aValues_627);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv826__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv826__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv826__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv826__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv826__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg271() throws JClassAlreadyExistsException {
        float __DSPOT_fValue_37 = 0.5540043F;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg271__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg271__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg271__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg271__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg271__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg271__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg271__40 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg271__41 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__41)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg271__42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg271__47 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__50 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__60 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg271__61 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg271__63 = use.param(__DSPOT_fValue_37);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__63)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg271__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg271__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg271__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg271__41)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__42)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__42)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__47)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__47)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__60)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg271__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg271__61)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv821() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_620 = -975194401L;
        String __DSPOT_sName_619 = "UFdpbI_d(}=o1Ihi%TCS";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv821__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv821__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv821__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv821__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv821__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv821__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv821__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv821__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv821__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv821__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv821__66 = __DSPOT_invoc_42.param(__DSPOT_sName_619, __DSPOT_nValue_620);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv821__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv821__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv821__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv821__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv821__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv821__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv700() throws JClassAlreadyExistsException {
        IJExpression[] __DSPOT_aValues_503 = new IJExpression[]{  };
        String __DSPOT_sName_502 = "Axx8O:>9?$i8hdx3(]uK";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv700__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv700__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv700__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv700__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv700__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv700__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv700__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse __DSPOT_invoc_35 = aUse.param("targetNamespace", 5);
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv700__42 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__42)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv700__43 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__43)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv700__44 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__44)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv700__45 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv700__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv700__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv700__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv700__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv700__66 = __DSPOT_invoc_35.paramArray(__DSPOT_sName_502, __DSPOT_aValues_503);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv700__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv700__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv700__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__43)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv700__44)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__45)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__45)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv700__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv700__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg228() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg228__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg228__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg228__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg228__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg228__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg228__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg228__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        int o_testMain_mg228__62 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testMain_mg228__62)));
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg228__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg228__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg228__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg228__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg228__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg308() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg308__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg308__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg308__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg308__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg308__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg308__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg308__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testMain_mg308__62 = enumcls.containsErrorTypes();
        Assert.assertFalse(o_testMain_mg308__62);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg308__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg308__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg308__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg308__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg308__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv831() throws JClassAlreadyExistsException {
        JEnumConstant[] __DSPOT_aValues_637 = new JEnumConstant[]{  };
        String __DSPOT_sName_636 = "P=$5mUIn$!c8KzPHQ_&)";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv831__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv831__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv831__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv831__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv831__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv831__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv831__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv831__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__42)).getAllAnnotations().isEmpty());
        JAnnotationUse __DSPOT_invoc_42 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv831__50 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__53 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__63 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv831__64 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_rv831__66 = __DSPOT_invoc_42.paramArray(__DSPOT_sName_636, __DSPOT_aValues_637);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__66)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__66)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv831__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv831__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv831__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        use.getAnnotationClass();
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv831__42)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__50)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__50)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__53)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__53)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__63)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv831__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv831__64)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv754() throws JClassAlreadyExistsException {
        boolean[] __DSPOT_aValues_556 = new boolean[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv754__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv754__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv754__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv754__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv754__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv754__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv754__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv754__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv754__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv754__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv754__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv754__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv754__65 = __DSPOT_invoc_40.params(__DSPOT_aValues_556);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv754__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv754__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv754__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv754__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv754__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv754__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv754__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv754__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_rv752() throws JClassAlreadyExistsException {
        long __DSPOT_nValue_554 = -80338399L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_rv752__6 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_rv752__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_rv752__22 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__23 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__34 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__35 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_rv752__39 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember __DSPOT_invoc_40 = arrayMember.param("Rob");
        JAnnotationArrayMember o_testMain_rv752__43 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__43)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv752__44 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_rv752__49 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__52 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__62 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_rv752__63 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationArrayMember o_testMain_rv752__65 = __DSPOT_invoc_40.param(__DSPOT_nValue_554);
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__65)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_rv752__6)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_rv752__6)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__22)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__23)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__34)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__35)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_rv752__43)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__44)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__44)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__52)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__52)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__62)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_rv752__63)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_rv752__63)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg343() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg343__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg343__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg343__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg343__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg343__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg343__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg343__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg343__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg343__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg343__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg343__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testMain_mg343__62 = ec2.annotations();
        Assert.assertTrue(o_testMain_mg343__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg343__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg343__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg343__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg343__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg343__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg343__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg345() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg345__5 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg345__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg345__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg345__5)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg345__21 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__22 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__33 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__34 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg345__38 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__38)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg345__39 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__39)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg345__40 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__40)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg345__41 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg345__46 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__49 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__59 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg345__60 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testMain_mg345__62 = ec2.argsMutable();
        Assert.assertTrue(o_testMain_mg345__62.isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg345__5)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg345__5)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg345__5)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__21)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__21)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__22)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__22)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__33)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__33)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__34)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__34)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__38)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__39)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg345__40)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__41)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__41)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__46)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__46)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__49)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__49)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__59)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__59)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg345__60)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg345__60)).getAnnotationMembers().isEmpty());
    }

    @Test(timeout = 10000)
    public void testMain_mg388() throws JClassAlreadyExistsException {
        double[] __DSPOT_aValues_155 = new double[0];
        String __DSPOT_sName_154 = "&h$9EY]mb@&7yoEh?_F)";
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cls = cm._class("Test");
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        JMethod o_testMain_mg388__7 = cls.method(JMod.PUBLIC, cm.VOID, "foo");
        Assert.assertTrue(((JMethod) (o_testMain_mg388__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg388__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg388__7)).isConstructor());
        final JAnnotationUse use = cls.annotate(cm.ref(Retention.class));
        Assert.assertFalse(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        final JDefinedClass enumcls = cls._enum("Iamenum");
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        final JEnumConstant ec = enumcls.enumConstant("GOOD");
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        final JEnumConstant ec1 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        final JEnumConstant ec2 = enumcls.enumConstant("BAD");
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        JAnnotationUse o_testMain_mg388__23 = use.param("value", ec);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__24 = use.param("value1", RetentionPolicy.RUNTIME);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationMembers().isEmpty());
        final JFieldVar field = cls.field(JMod.PRIVATE, cm.DOUBLE, "y");
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        final JAnnotationUse aUse = field.annotate(Retention.class);
        Assert.assertFalse(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__35 = aUse.param("name", "book");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__36 = aUse.param("targetNamespace", 5);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember = aUse.paramArray("names");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg388__40 = arrayMember.param("Bob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__40)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg388__41 = arrayMember.param("Rob");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__41)).getAllAnnotations().isEmpty());
        JAnnotationArrayMember o_testMain_mg388__42 = arrayMember.param("Ted");
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__42)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg388__43 = aUse.paramArray("namesno", new int[]{ 4, 5, 6 });
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationMembers().isEmpty());
        final JAnnotationArrayMember arrayMember2 = aUse.paramArray("values");
        Assert.assertTrue(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        JAnnotationUse o_testMain_mg388__48 = arrayMember2.annotate(Target.class).param("type", Integer.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__51 = arrayMember2.annotate(Target.class).param("type", Float.class);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationMembers().isEmpty());
        final AnnotationUseFuncTest.XmlElementW w = cls.annotate2(AnnotationUseFuncTest.XmlElementW.class);
        w.ns("##default").value("foobar");
        final JAnnotationUse myuse = aUse.annotationParam("foo", Target.class);
        Assert.assertFalse(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertTrue(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__61 = myuse.param("junk", 7);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationMembers().isEmpty());
        JAnnotationUse o_testMain_mg388__62 = myuse.param("value-value");
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationMembers().isEmpty());
        CodeModelTestsHelper.parseCodeModel(cm);
        JAnnotationUse o_testMain_mg388__64 = aUse.paramArray(__DSPOT_sName_154, __DSPOT_aValues_155);
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__64)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__64)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JMethod) (o_testMain_mg388__7)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testMain_mg388__7)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testMain_mg388__7)).isConstructor());
        Assert.assertTrue(((JAnnotationUse) (use)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (use)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (use)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isHidden());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (enumcls)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isClass());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isInterface());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (enumcls)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (enumcls)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPackage());
        Assert.assertNull(((JDefinedClass) (enumcls)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Test.Iamenum)", ((JDefinedClass) (enumcls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (enumcls)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (enumcls)).isReference());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isArray());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (enumcls)).isError());
        Assert.assertFalse(((JEnumConstant) (ec)).hasArgs());
        Assert.assertEquals(-1627700479, ((int) (((JEnumConstant) (ec)).hashCode())));
        Assert.assertEquals("Test.Iamenum.GOOD", ((JEnumConstant) (ec)).getName());
        Assert.assertFalse(((JEnumConstant) (ec1)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec1)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec1)).getName());
        Assert.assertFalse(((JEnumConstant) (ec2)).hasArgs());
        Assert.assertEquals(-1629828567, ((int) (((JEnumConstant) (ec2)).hashCode())));
        Assert.assertEquals("Test.Iamenum.BAD", ((JEnumConstant) (ec2)).getName());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__23)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__23)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__24)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__24)).getAnnotationMembers().isEmpty());
        Assert.assertEquals(-961000909, ((int) (((JFieldVar) (field)).hashCode())));
        Assert.assertTrue(((JAnnotationUse) (aUse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (aUse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (aUse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__35)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__35)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__36)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__36)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__40)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__41)).getAllAnnotations().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (o_testMain_mg388__42)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__43)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Retention)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__43)).getAnnotationMembers().isEmpty());
        Assert.assertFalse(((JAnnotationArrayMember) (arrayMember2)).getAllAnnotations().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__48)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__48)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__51)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__51)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (myuse)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (myuse)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (myuse)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__61)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__61)).getAnnotationMembers().isEmpty());
        Assert.assertTrue(((JAnnotationUse) (o_testMain_mg388__62)).hasAnnotationMembers());
        Assert.assertNull(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getPrimitiveType());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getAllInnerClasses().isEmpty());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.annotation.Target)", ((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).toString());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isInterface());
        Assert.assertTrue(((Collection) (((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).getTypeParameters())).isEmpty());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isAbstract());
        Assert.assertTrue(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isReference());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isArray());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isPrimitive());
        Assert.assertFalse(((AbstractJClass) (((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationClass())).isError());
        Assert.assertFalse(((JAnnotationUse) (o_testMain_mg388__62)).getAnnotationMembers().isEmpty());
    }
}

