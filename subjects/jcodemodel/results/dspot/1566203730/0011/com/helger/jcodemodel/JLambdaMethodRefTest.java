package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;


public final class JLambdaMethodRefTest {
    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_literalMutationString38_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "Yc ");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testInvocationMethodRef_JMethod_literalMutationString38 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'Yc \'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg128_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nIndex_32 = 1429829737;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            m.paramAtIndex(__DSPOT_nIndex_32);
            org.junit.Assert.fail("testInvocationMethodRef_JMethod_mg128 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected) {
            Assert.assertEquals("Index: 1429829737, Size: 1", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg171() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg171__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg171__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg171__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg171__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testInvocationMethodRef_JMethod_mg171__31 = con.annotations();
        Assert.assertTrue(o_testInvocationMethodRef_JMethod_mg171__31.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg171__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg171__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg161_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sName_48 = "!Ld8U4ryn<3,/?bI!ElJ";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            jInvocation.narrow(__DSPOT_sName_48);
            org.junit.Assert.fail("testInvocationMethodRef_JMethod_mg161 should have thrown IllegalStateException");
        } catch (IllegalStateException expected) {
            Assert.assertEquals("No owner is present, so this invocation cannot be generified!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg140_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sName_37 = "`HNw]f4QDhB+ _ 2&pb?";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            p.name(__DSPOT_sName_37);
            org.junit.Assert.fail("testInvocationMethodRef_JMethod_mg140 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'`HNw]f4QDhB+ _ 2&pb?\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethodnull190_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), null);
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            org.junit.Assert.fail("testInvocationMethodRef_JMethodnull190 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg180() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg180__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg180__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg180__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg180__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testInvocationMethodRef_JMethod_mg180__31 = con.mods();
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isStrictFP());
        Assert.assertEquals(1, ((int) (((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).getValue())));
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isAbstract());
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isDefault());
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isStatic());
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isNative());
        Assert.assertFalse(((JMods) (o_testInvocationMethodRef_JMethod_mg180__31)).isSynchronized());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg180__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg180__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg95_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_20 = -1754635521;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
            final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
            final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
            CodeModelTestsHelper.toString(aLambda);
            final JMethod con = cl.constructor(JMod.PUBLIC);
            con.body().decl(cm.ref(Object.class), "any", aLambda);
            CodeModelTestsHelper.parseCodeModel(cm);
            cl.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testInvocationMethodRef_JMethod_mg95 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg150() throws JClassAlreadyExistsException {
        double __DSPOT_v_41 = 0.9827414718303376;
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg150__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg150__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg150__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg150__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg150__32 = jInvocation.arg(__DSPOT_v_41);
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg150__32)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg150__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg150__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg157() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg157__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg157__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg157__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg157__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        List<IJExpression> o_testInvocationMethodRef_JMethod_mg157__31 = jInvocation.args();
        Assert.assertFalse(o_testInvocationMethodRef_JMethod_mg157__31.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg157__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg157__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg135() throws JClassAlreadyExistsException {
        JVar __DSPOT_o_35 = null;
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg135__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg135__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg135__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg135__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testInvocationMethodRef_JMethod_mg135__32 = p.equals(__DSPOT_o_35);
        Assert.assertFalse(o_testInvocationMethodRef_JMethod_mg135__32);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg135__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg135__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg156() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg156__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg156__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg156__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg156__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg156__31 = jInvocation.argThis();
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg156__31)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg156__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg156__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg101() throws JClassAlreadyExistsException {
        String __DSPOT_sName_24 = "h(*fl<xJgehgad?HCt1H";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg101__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg101__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg101__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg101__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JEnumConstant o_testInvocationMethodRef_JMethod_mg101__32 = cl.enumConstant(__DSPOT_sName_24);
        Assert.assertFalse(((JEnumConstant) (o_testInvocationMethodRef_JMethod_mg101__32)).hasArgs());
        Assert.assertEquals(179779997, ((int) (((JEnumConstant) (o_testInvocationMethodRef_JMethod_mg101__32)).hashCode())));
        Assert.assertEquals("com.helger.test.LambdaInvocationMethodRefJMethod.h(*fl<xJgehgad?HCt1H", ((JEnumConstant) (o_testInvocationMethodRef_JMethod_mg101__32)).getName());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg101__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg101__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg155() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg155__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg155__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg155__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg155__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg155__31 = jInvocation.argNull();
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg155__31)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg155__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg155__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg154() throws JClassAlreadyExistsException {
        long __DSPOT_v_45 = 979578557L;
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg154__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg154__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg154__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg154__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg154__32 = jInvocation.arg(__DSPOT_v_45);
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg154__32)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg154__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg154__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg89() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg89__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg89__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg89__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg89__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testInvocationMethodRef_JMethod_mg89__31 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isError());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isParameterized());
        Assert.assertNull(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isReference());
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testInvocationMethodRef_JMethod_mg89__31)).isPrimitive());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg89__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg89__27)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg149() throws JClassAlreadyExistsException {
        char __DSPOT_v_40 = '6';
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg149__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg149__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg149__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg149__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg149__32 = jInvocation.arg(__DSPOT_v_40);
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg149__32)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg149__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg149__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_add12() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        JInvocation o_testInvocationMethodRef_JMethod_add12__18 = JExpr._this().invoke("andThen");
        Assert.assertEquals(902640489, ((int) (((JInvocation) (o_testInvocationMethodRef_JMethod_add12__18)).hashCode())));
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_add12__18)).isConstructor());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_add12__26 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_add12__26);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_add12__29 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_add12__29)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertEquals(902640489, ((int) (((JInvocation) (o_testInvocationMethodRef_JMethod_add12__18)).hashCode())));
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_add12__18)).isConstructor());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_add12__26);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_add12__29)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg148() throws JClassAlreadyExistsException {
        boolean __DSPOT_v_39 = false;
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg148__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg148__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg148__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg148__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JInvocation o_testInvocationMethodRef_JMethod_mg148__32 = jInvocation.arg(__DSPOT_v_39);
        Assert.assertFalse(((JInvocation) (o_testInvocationMethodRef_JMethod_mg148__32)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg148__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg148__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg104() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_aArgTypes_26 = new AbstractJType[0];
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg104__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg104__25);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg104__28 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg104__28)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        JMethod o_testInvocationMethodRef_JMethod_mg104__32 = cl.getConstructor(__DSPOT_aArgTypes_26);
        Assert.assertTrue(((JMethod) (o_testInvocationMethodRef_JMethod_mg104__32)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testInvocationMethodRef_JMethod_mg104__32)).hasVarArgs());
        Assert.assertTrue(((JMethod) (o_testInvocationMethodRef_JMethod_mg104__32)).isConstructor());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg104__25);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg104__28)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testInvocationMethodRef_JMethod_mg90() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaInvocationMethodRefJMethod");
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        final JMethod m = cl.method(JMod.PUBLIC, cm.ref(String.class), "myToString");
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef lambdaMethod = new JLambdaMethodRef(cm.ref("test.Person"), "getFirstName");
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        final JInvocation jInvocation = JExpr._this().invoke("andThen").arg(lambdaMethod);
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(jInvocation, m);
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testInvocationMethodRef_JMethod_mg90__24 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg90__24);
        final JMethod con = cl.constructor(JMod.PUBLIC);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        JVar o_testInvocationMethodRef_JMethod_mg90__27 = con.body().decl(cm.ref(Object.class), "any", aLambda);
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg90__27)).hashCode())));
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testInvocationMethodRef_JMethod_mg90__31 = cl._extends();
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).isParameterized());
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).isReference());
        Assert.assertFalse(((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testInvocationMethodRef_JMethod_mg90__31)).isError());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaInvocationMethodRefJMethod)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (lambdaMethod)).isStaticRef());
        Assert.assertFalse(((JInvocation) (jInvocation)).isConstructor());
        Assert.assertFalse(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("this.andThen(test.Person::getFirstName)::myToString", o_testInvocationMethodRef_JMethod_mg90__24);
        Assert.assertTrue(((JMethod) (con)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (con)).hasVarArgs());
        Assert.assertTrue(((JMethod) (con)).isConstructor());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (o_testInvocationMethodRef_JMethod_mg90__27)).hashCode())));
    }
}

