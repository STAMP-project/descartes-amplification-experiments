package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class JLambdaMethodRefTest {
    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isReference());
        JVar o_testStaticMethodRef_JMethod__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod__21);
        String o_testStaticMethodRef_JMethod__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isReference());
        JVar o_testStaticMethodRef_JMethod__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod__32);
        JVar o_testStaticMethodRef_JMethod__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod__33);
        String o_testStaticMethodRef_JMethod__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod__34);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod__33);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg122() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg122__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg122__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg122__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg122__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg122__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__21);
        String o_testStaticMethodRef_JMethod_mg122__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg122__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg122__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg122__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg122__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg122__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg122__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg122__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg122__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__32);
        JVar o_testStaticMethodRef_JMethod_mg122__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__33);
        String o_testStaticMethodRef_JMethod_mg122__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg122__34);
        JMods o_testStaticMethodRef_JMethod_mg122__35 = p.mods();
        Assert.assertEquals(0, ((int) (((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).getValue())));
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isStatic());
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isDefault());
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isAbstract());
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isNative());
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testStaticMethodRef_JMethod_mg122__35)).isStrictFP());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg122__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg122__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg122__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg122__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg122__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg122__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg122__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_literalMutationString39_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "o^bj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            org.junit.Assert.fail("testStaticMethodRef_JMethod_literalMutationString39 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'o^bj\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethodnull134_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, null);
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            org.junit.Assert.fail("testStaticMethodRef_JMethodnull134 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg79_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nMods_20 = -169851362;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            cl.constructor(__DSPOT_nMods_20);
            org.junit.Assert.fail("testStaticMethodRef_JMethod_mg79 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg119() throws JClassAlreadyExistsException {
        Object __DSPOT_o_35 = new Object();
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg119__19 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg119__19);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg119__21 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg119__22 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg119__23 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__23);
        String o_testStaticMethodRef_JMethod_mg119__24 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg119__24);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg119__27 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg119__27);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg119__30 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg119__31 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg119__32 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg119__33 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg119__34 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__34);
        JVar o_testStaticMethodRef_JMethod_mg119__35 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__35);
        String o_testStaticMethodRef_JMethod_mg119__36 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg119__36);
        boolean o_testStaticMethodRef_JMethod_mg119__37 = p.equals(__DSPOT_o_35);
        Assert.assertFalse(o_testStaticMethodRef_JMethod_mg119__37);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg119__19);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__21)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__22)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__23);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg119__24);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg119__27);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__30)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg119__31)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__32)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg119__33)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__34);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg119__35);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg119__36);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethodnull133_failAssert0() throws JClassAlreadyExistsException {
        try {
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), null);
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            org.junit.Assert.fail("testStaticMethodRef_JMethodnull133 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg101() throws JClassAlreadyExistsException {
        AbstractJType[] __DSPOT_argTypes_30 = new AbstractJType[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg101__18 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg101__18);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg101__20 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg101__21 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg101__22 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__22);
        String o_testStaticMethodRef_JMethod_mg101__23 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg101__23);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg101__26 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg101__26);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg101__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg101__30 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg101__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg101__32 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg101__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__33);
        JVar o_testStaticMethodRef_JMethod_mg101__34 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__34);
        String o_testStaticMethodRef_JMethod_mg101__35 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg101__35);
        boolean o_testStaticMethodRef_JMethod_mg101__36 = m.hasSignature(__DSPOT_argTypes_30);
        Assert.assertFalse(o_testStaticMethodRef_JMethod_mg101__36);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg101__18);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__20)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__21)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__22);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg101__23);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg101__26);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__29)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg101__30)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__31)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg101__32)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__33);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg101__34);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg101__35);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg74() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg74__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg74__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg74__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg74__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg74__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__21);
        String o_testStaticMethodRef_JMethod_mg74__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg74__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg74__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg74__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg74__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg74__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg74__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg74__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg74__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__32);
        JVar o_testStaticMethodRef_JMethod_mg74__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__33);
        String o_testStaticMethodRef_JMethod_mg74__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg74__34);
        AbstractJClass o_testStaticMethodRef_JMethod_mg74__35 = cl._extends();
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).isParameterized());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).isError());
        Assert.assertTrue(((JReferencedClass) (o_testStaticMethodRef_JMethod_mg74__35)).isReference());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg74__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg74__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg74__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg74__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg74__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg74__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg74__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg63() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg63__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg63__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg63__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg63__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg63__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__21);
        String o_testStaticMethodRef_JMethod_mg63__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg63__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg63__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg63__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg63__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg63__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg63__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg63__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg63__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__32);
        JVar o_testStaticMethodRef_JMethod_mg63__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__33);
        String o_testStaticMethodRef_JMethod_mg63__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg63__34);
        boolean o_testStaticMethodRef_JMethod_mg63__35 = cm.buildsErrorTypeRefs();
        Assert.assertFalse(o_testStaticMethodRef_JMethod_mg63__35);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg63__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg63__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg63__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg63__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg63__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg63__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg63__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg85() throws JClassAlreadyExistsException {
        String __DSPOT_sName_24 = "4=uV!aV(v6Iw9b>c1NAn";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg85__18 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg85__18);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg85__20 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg85__21 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg85__22 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__22);
        String o_testStaticMethodRef_JMethod_mg85__23 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg85__23);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg85__26 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg85__26);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg85__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg85__30 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg85__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg85__32 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg85__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__33);
        JVar o_testStaticMethodRef_JMethod_mg85__34 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__34);
        String o_testStaticMethodRef_JMethod_mg85__35 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg85__35);
        JEnumConstant o_testStaticMethodRef_JMethod_mg85__36 = cl.enumConstant(__DSPOT_sName_24);
        Assert.assertEquals(1299756647, ((int) (((JEnumConstant) (o_testStaticMethodRef_JMethod_mg85__36)).hashCode())));
        Assert.assertEquals("com.helger.test.LambdaTest.4=uV!aV(v6Iw9b>c1NAn", ((JEnumConstant) (o_testStaticMethodRef_JMethod_mg85__36)).getName());
        Assert.assertFalse(((JEnumConstant) (o_testStaticMethodRef_JMethod_mg85__36)).hasArgs());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg85__18);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__20)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__21)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__22);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg85__23);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg85__26);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__29)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg85__30)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__31)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg85__32)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__33);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg85__34);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg85__35);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg73() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg73__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg73__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg73__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg73__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg73__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__21);
        String o_testStaticMethodRef_JMethod_mg73__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg73__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg73__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg73__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg73__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg73__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg73__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg73__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg73__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__32);
        JVar o_testStaticMethodRef_JMethod_mg73__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__33);
        String o_testStaticMethodRef_JMethod_mg73__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg73__34);
        AbstractJClass o_testStaticMethodRef_JMethod_mg73__35 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isParameterized());
        Assert.assertNull(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testStaticMethodRef_JMethod_mg73__35)).isReference());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg73__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg73__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg73__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg73__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg73__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg73__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg73__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg98() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg98__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg98__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg98__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg98__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg98__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__21);
        String o_testStaticMethodRef_JMethod_mg98__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg98__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg98__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg98__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg98__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg98__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg98__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg98__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg98__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__32);
        JVar o_testStaticMethodRef_JMethod_mg98__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__33);
        String o_testStaticMethodRef_JMethod_mg98__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg98__34);
        Collection<JAnnotationUse> o_testStaticMethodRef_JMethod_mg98__35 = m.annotations();
        Assert.assertTrue(o_testStaticMethodRef_JMethod_mg98__35.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg98__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg98__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg98__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg98__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg98__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg98__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg98__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg86() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg86__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg86__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg86__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg86__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg86__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__21);
        String o_testStaticMethodRef_JMethod_mg86__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg86__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg86__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg86__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg86__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg86__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg86__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg86__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg86__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__32);
        JVar o_testStaticMethodRef_JMethod_mg86__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__33);
        String o_testStaticMethodRef_JMethod_mg86__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg86__34);
        Map<String, JFieldVar> o_testStaticMethodRef_JMethod_mg86__35 = cl.fields();
        Assert.assertTrue(o_testStaticMethodRef_JMethod_mg86__35.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg86__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg86__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg86__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg86__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg86__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg86__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg86__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg64() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg64__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg64__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg64__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg64__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg64__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__21);
        String o_testStaticMethodRef_JMethod_mg64__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg64__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg64__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg64__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg64__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg64__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg64__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg64__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg64__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__32);
        JVar o_testStaticMethodRef_JMethod_mg64__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__33);
        String o_testStaticMethodRef_JMethod_mg64__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg64__34);
        int o_testStaticMethodRef_JMethod_mg64__35 = cm.countArtifacts();
        Assert.assertEquals(1, ((int) (o_testStaticMethodRef_JMethod_mg64__35)));
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg64__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg64__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg64__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg64__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg64__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg64__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg64__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg77() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg77__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg77__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg77__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg77__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg77__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__21);
        String o_testStaticMethodRef_JMethod_mg77__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg77__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg77__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg77__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg77__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg77__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg77__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg77__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg77__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__32);
        JVar o_testStaticMethodRef_JMethod_mg77__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__33);
        String o_testStaticMethodRef_JMethod_mg77__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg77__34);
        Collection<JAnnotationUse> o_testStaticMethodRef_JMethod_mg77__35 = cl.annotations();
        Assert.assertTrue(o_testStaticMethodRef_JMethod_mg77__35.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg77__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg77__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg77__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg77__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg77__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg77__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg77__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg90() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg90__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg90__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg90__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg90__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg90__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__21);
        String o_testStaticMethodRef_JMethod_mg90__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg90__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg90__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg90__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg90__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg90__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg90__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg90__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg90__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__32);
        JVar o_testStaticMethodRef_JMethod_mg90__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__33);
        String o_testStaticMethodRef_JMethod_mg90__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg90__34);
        JDocComment o_testStaticMethodRef_JMethod_mg90__35 = cl.headerComment();
        Assert.assertTrue(o_testStaticMethodRef_JMethod_mg90__35.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertTrue(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg90__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg90__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg90__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg90__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isHidden());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg90__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg90__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg90__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg124_failAssert0() throws JClassAlreadyExistsException {
        try {
            String __DSPOT_sName_37 = "N`nJW,ftS}%g/mS6TE0=";
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            p.name(__DSPOT_sName_37);
            org.junit.Assert.fail("testStaticMethodRef_JMethod_mg124 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg81() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg81__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg81__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg81__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg81__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg81__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__21);
        String o_testStaticMethodRef_JMethod_mg81__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg81__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg81__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg81__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg81__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg81__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg81__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg81__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg81__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__32);
        JVar o_testStaticMethodRef_JMethod_mg81__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__33);
        String o_testStaticMethodRef_JMethod_mg81__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg81__34);
        boolean o_testStaticMethodRef_JMethod_mg81__35 = cl.containsErrorTypes();
        Assert.assertFalse(o_testStaticMethodRef_JMethod_mg81__35);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg81__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg81__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg81__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg81__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg81__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg81__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg81__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg91() throws JClassAlreadyExistsException {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg91__17 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg91__17);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg91__19 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg91__20 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg91__21 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__21);
        String o_testStaticMethodRef_JMethod_mg91__22 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg91__22);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg91__25 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg91__25);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg91__28 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg91__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg91__30 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg91__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg91__32 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__32);
        JVar o_testStaticMethodRef_JMethod_mg91__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__33);
        String o_testStaticMethodRef_JMethod_mg91__34 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg91__34);
        cl.hide();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg91__17);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__19)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__20)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__21);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg91__22);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg91__25);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__28)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg91__29)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__30)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg91__31)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__32);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg91__33);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg91__34);
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg112_failAssert0() throws JClassAlreadyExistsException {
        try {
            int __DSPOT_nIndex_32 = -445612720;
            final JCodeModel cm = new JCodeModel();
            final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
            final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
            final JVar p = m.param(Object.class, "obj");
            m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
            final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.type();
            aLambda.var();
            aLambda.methodName();
            m.name("newName");
            CodeModelTestsHelper.toString(aLambda);
            aLambda.isStaticRef();
            aLambda.isStaticRef();
            aLambda.method();
            aLambda.method();
            aLambda.type();
            aLambda.type();
            aLambda.var();
            aLambda.var();
            aLambda.methodName();
            m.paramAtIndex(__DSPOT_nIndex_32);
            org.junit.Assert.fail("testStaticMethodRef_JMethod_mg112 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected) {
            Assert.assertEquals("Index -445612720 out of bounds for length 1", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testStaticMethodRef_JMethod_mg82() throws JClassAlreadyExistsException {
        String __DSPOT_sName_21 = "J;!9+7]6k!Ld8U4ryn<3";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JDefinedClass cl = cm._class("com.helger.test.LambdaTest");
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        final JMethod m = cl.method(((JMod.PUBLIC) | (JMod.STATIC)), cm.ref(String.class), "myToString");
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        final JVar p = m.param(Object.class, "obj");
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        m.body()._return(cm.ref(String.class).staticInvoke("valueOf").arg(p));
        final JLambdaMethodRef aLambda = new JLambdaMethodRef(m);
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        String o_testStaticMethodRef_JMethod_mg82__18 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg82__18);
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg82__20 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg82__21 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg82__22 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__22);
        String o_testStaticMethodRef_JMethod_mg82__23 = aLambda.methodName();
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg82__23);
        m.name("newName");
        String o_testStaticMethodRef_JMethod_mg82__26 = CodeModelTestsHelper.toString(aLambda);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg82__26);
        aLambda.isStaticRef();
        aLambda.isStaticRef();
        JMethod o_testStaticMethodRef_JMethod_mg82__29 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).hasVarArgs());
        JMethod o_testStaticMethodRef_JMethod_mg82__30 = aLambda.method();
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).hasVarArgs());
        AbstractJType o_testStaticMethodRef_JMethod_mg82__31 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isReference());
        AbstractJType o_testStaticMethodRef_JMethod_mg82__32 = aLambda.type();
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isReference());
        JVar o_testStaticMethodRef_JMethod_mg82__33 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__33);
        JVar o_testStaticMethodRef_JMethod_mg82__34 = aLambda.var();
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__34);
        String o_testStaticMethodRef_JMethod_mg82__35 = aLambda.methodName();
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg82__35);
        boolean o_testStaticMethodRef_JMethod_mg82__36 = cl.containsField(__DSPOT_sName_21);
        Assert.assertFalse(o_testStaticMethodRef_JMethod_mg82__36);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cl)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cl)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cl)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cl)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cl)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cl)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (cl)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cl)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cl)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cl)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (cl)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isParameterized());
        Assert.assertNull(((JDefinedClass) (cl)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cl)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cl)).isArray());
        Assert.assertFalse(((JDefinedClass) (cl)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cl)).isError());
        Assert.assertTrue(((JDefinedClass) (cl)).isReference());
        Assert.assertFalse(((JMethod) (m)).isConstructor());
        Assert.assertTrue(((JMethod) (m)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (m)).hasVarArgs());
        Assert.assertEquals(-1828294485, ((int) (((JVar) (p)).hashCode())));
        Assert.assertTrue(((JLambdaMethodRef) (aLambda)).isStaticRef());
        Assert.assertEquals("com.helger.test.LambdaTest::myToString", o_testStaticMethodRef_JMethod_mg82__18);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__20)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__21)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__22);
        Assert.assertEquals("myToString", o_testStaticMethodRef_JMethod_mg82__23);
        Assert.assertEquals("com.helger.test.LambdaTest::newName", o_testStaticMethodRef_JMethod_mg82__26);
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__29)).hasVarArgs());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).isConstructor());
        Assert.assertTrue(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (o_testStaticMethodRef_JMethod_mg82__30)).hasVarArgs());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__31)).isReference());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isHidden());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPackage())).isUnnamed());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isPackage());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(com.helger.test.LambdaTest)", ((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isParameterized());
        Assert.assertNull(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getPrimitiveType());
        Assert.assertTrue(((Collection) (((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isArray());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isError());
        Assert.assertTrue(((JDefinedClass) (o_testStaticMethodRef_JMethod_mg82__32)).isReference());
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__33);
        Assert.assertNull(o_testStaticMethodRef_JMethod_mg82__34);
        Assert.assertEquals("newName", o_testStaticMethodRef_JMethod_mg82__35);
    }
}

