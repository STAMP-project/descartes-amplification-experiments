package com.helger.jcodemodel;


import com.helger.jcodemodel.util.CodeModelTestsHelper;
import java.util.Collection;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public final class JavadocFuncTest {
    @Test(timeout = 10000)
    public void testOnClass() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass__7);
        boolean o_testOnClass__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass__19);
        boolean o_testOnClass__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass__21);
        boolean o_testOnClass__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass__24);
        boolean o_testOnClass__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass__27);
        boolean o_testOnClass__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass__7);
        Assert.assertTrue(o_testOnClass__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass__19);
        Assert.assertTrue(o_testOnClass__21);
        Assert.assertTrue(o_testOnClass__24);
        Assert.assertTrue(o_testOnClass__27);
        Assert.assertTrue(o_testOnClass__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_add17_rv19617() throws Exception {
        String __DSPOT_sName_4962 = "%2_,}-#GJY}fw%I@ylvO";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_add17_rv19617__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_add17_rv19617__8);
        boolean o_testOnClass_add17_rv19617__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_add17_rv19617__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_add17_rv19617__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_add17_rv19617__20);
        JDocComment __DSPOT_invoc_21 = method.javadoc();
        boolean o_testOnClass_add17_rv19617__25 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_add17_rv19617__25);
        boolean o_testOnClass_add17_rv19617__28 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_add17_rv19617__28);
        boolean o_testOnClass_add17_rv19617__31 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_add17_rv19617__31);
        boolean o_testOnClass_add17_rv19617__34 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_add17_rv19617__34);
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, String> o_testOnClass_add17_rv19617__38 = __DSPOT_invoc_21.addXdoclet(__DSPOT_sName_4962);
        Assert.assertTrue(o_testOnClass_add17_rv19617__38.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_add17_rv19617__8);
        Assert.assertTrue(o_testOnClass_add17_rv19617__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_add17_rv19617__20);
        Assert.assertTrue(o_testOnClass_add17_rv19617__25);
        Assert.assertTrue(o_testOnClass_add17_rv19617__28);
        Assert.assertTrue(o_testOnClass_add17_rv19617__31);
        Assert.assertTrue(o_testOnClass_add17_rv19617__34);
    }

    @Test(timeout = 10000)
    public void testOnClassnull207_mg29129() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClassnull207_mg29129__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClassnull207_mg29129__7);
        boolean o_testOnClassnull207_mg29129__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClassnull207_mg29129__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClassnull207_mg29129__19 = method.javadoc().add(null);
        Assert.assertTrue(o_testOnClassnull207_mg29129__19);
        boolean o_testOnClassnull207_mg29129__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClassnull207_mg29129__21);
        boolean o_testOnClassnull207_mg29129__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClassnull207_mg29129__24);
        boolean o_testOnClassnull207_mg29129__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClassnull207_mg29129__27);
        boolean o_testOnClassnull207_mg29129__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClassnull207_mg29129__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testOnClassnull207_mg29129__34 = method.annotations();
        Assert.assertTrue(o_testOnClassnull207_mg29129__34.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClassnull207_mg29129__7);
        Assert.assertTrue(o_testOnClassnull207_mg29129__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClassnull207_mg29129__19);
        Assert.assertTrue(o_testOnClassnull207_mg29129__21);
        Assert.assertTrue(o_testOnClassnull207_mg29129__24);
        Assert.assertTrue(o_testOnClassnull207_mg29129__27);
        Assert.assertTrue(o_testOnClassnull207_mg29129__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString63_mg6878() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString63_mg6878__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__7);
        boolean o_testOnClass_literalMutationString63_mg6878__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "Left");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString63_mg6878__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__19);
        boolean o_testOnClass_literalMutationString63_mg6878__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__21);
        boolean o_testOnClass_literalMutationString63_mg6878__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__24);
        boolean o_testOnClass_literalMutationString63_mg6878__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__27);
        boolean o_testOnClass_literalMutationString63_mg6878__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        IJClassContainer<?> o_testOnClass_literalMutationString63_mg6878__34 = pkg.parentContainer();
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).isPackage());
        Assert.assertFalse(((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).isClass());
        Assert.assertTrue(((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (o_testOnClass_literalMutationString63_mg6878__34)).getAllResourceFiles())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__7);
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__19);
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__21);
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__24);
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__27);
        Assert.assertTrue(o_testOnClass_literalMutationString63_mg6878__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg168_mg20496() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg168_mg20496__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__7);
        boolean o_testOnClass_mg168_mg20496__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg168_mg20496__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__19);
        boolean o_testOnClass_mg168_mg20496__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__21);
        boolean o_testOnClass_mg168_mg20496__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__24);
        boolean o_testOnClass_mg168_mg20496__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__27);
        boolean o_testOnClass_mg168_mg20496__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg168_mg20496__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testOnClass_mg168_mg20496__34 = cls.javadoc();
        Assert.assertFalse(o_testOnClass_mg168_mg20496__34.isEmpty());
        int o_testOnClass_mg168_mg20496__35 = cm.countArtifacts();
        Assert.assertEquals(2, ((int) (o_testOnClass_mg168_mg20496__35)));
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg168_mg20496__7);
        Assert.assertTrue(o_testOnClass_mg168_mg20496__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg168_mg20496__19);
        Assert.assertTrue(o_testOnClass_mg168_mg20496__21);
        Assert.assertTrue(o_testOnClass_mg168_mg20496__24);
        Assert.assertTrue(o_testOnClass_mg168_mg20496__27);
        Assert.assertTrue(o_testOnClass_mg168_mg20496__30);
        Assert.assertFalse(o_testOnClass_mg168_mg20496__34.isEmpty());
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString86_mg26648() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString86_mg26648__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__7);
        boolean o_testOnClass_literalMutationString86_mg26648__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString86_mg26648__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__19);
        boolean o_testOnClass_literalMutationString86_mg26648__21 = method.javadoc().addParam(aParam).add("Inputvalue");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__21);
        boolean o_testOnClass_literalMutationString86_mg26648__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__24);
        boolean o_testOnClass_literalMutationString86_mg26648__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__27);
        boolean o_testOnClass_literalMutationString86_mg26648__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testOnClass_literalMutationString86_mg26648__34 = cls._extends();
        Assert.assertEquals("com.helger.jcodemodel.JReferencedClass(java.lang.Object)", ((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).toString());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).getTypeParameters())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).isParameterized());
        Assert.assertTrue(((Collection) (((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).isArray());
        Assert.assertFalse(((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).isPrimitive());
        Assert.assertFalse(((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).isError());
        Assert.assertTrue(((JReferencedClass) (o_testOnClass_literalMutationString86_mg26648__34)).isReference());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__7);
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__19);
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__21);
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__24);
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__27);
        Assert.assertTrue(o_testOnClass_literalMutationString86_mg26648__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg151_mg30274() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg151_mg30274__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__7);
        cls.javadoc().addAuthor();
        boolean o_testOnClass_mg151_mg30274__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg151_mg30274__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__19);
        boolean o_testOnClass_mg151_mg30274__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__21);
        boolean o_testOnClass_mg151_mg30274__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__24);
        boolean o_testOnClass_mg151_mg30274__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__27);
        boolean o_testOnClass_mg151_mg30274__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg151_mg30274__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        Collection<JAnnotationUse> o_testOnClass_mg151_mg30274__34 = cls.annotations();
        Assert.assertTrue(o_testOnClass_mg151_mg30274__34.isEmpty());
        String o_testOnClass_mg151_mg30274__35 = method.name();
        Assert.assertEquals("getPlusX", o_testOnClass_mg151_mg30274__35);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg151_mg30274__7);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg151_mg30274__19);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__21);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__24);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__27);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__30);
        Assert.assertTrue(o_testOnClass_mg151_mg30274__34.isEmpty());
    }

    @Test(timeout = 10000)
    public void testOnClass_mg145_mg37924_failAssert0() throws Exception {
        try {
            String __DSPOT_sMessage_9723 = "?V>=^wf4CZFk)(A)=3I<";
            String __DSPOT_sClassLocalName_25 = "ysP>6W.t0C-?9AC*$S o";
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "any");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value plus \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag("since").add("JCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            pkg.ref(__DSPOT_sClassLocalName_25);
            cm.errorClass(__DSPOT_sMessage_9723);
            org.junit.Assert.fail("testOnClass_mg145_mg37924 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: JClass name contains \'.\': ysP>6W.t0C-?9AC*$S o", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_mg176_literalMutationString29369() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertTrue(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg176_literalMutationString29369__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__7);
        boolean o_testOnClass_mg176_literalMutationString29369__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg176_literalMutationString29369__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__19);
        boolean o_testOnClass_mg176_literalMutationString29369__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__21);
        boolean o_testOnClass_mg176_literalMutationString29369__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__24);
        boolean o_testOnClass_mg176_literalMutationString29369__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__27);
        boolean o_testOnClass_mg176_literalMutationString29369__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        JDocComment o_testOnClass_mg176_literalMutationString29369__34 = method.javadoc();
        Assert.assertFalse(o_testOnClass_mg176_literalMutationString29369__34.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertTrue(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__7);
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__19);
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__21);
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__24);
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__27);
        Assert.assertTrue(o_testOnClass_mg176_literalMutationString29369__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg147_mg33125() throws Exception {
        String __DSPOT_sSubPackageName_26 = "Y.>c^U!$Cz2lvLY3Pe#L";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg147_mg33125__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__8);
        boolean o_testOnClass_mg147_mg33125__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg147_mg33125__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__20);
        boolean o_testOnClass_mg147_mg33125__22 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__22);
        boolean o_testOnClass_mg147_mg33125__25 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__25);
        boolean o_testOnClass_mg147_mg33125__28 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__28);
        boolean o_testOnClass_mg147_mg33125__31 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg147_mg33125__31);
        CodeModelTestsHelper.parseCodeModel(cm);
        JPackage o_testOnClass_mg147_mg33125__35 = pkg.subPackage(__DSPOT_sSubPackageName_26);
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (o_testOnClass_mg147_mg33125__35)).isPackage());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg147_mg33125__35)).isClass());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg147_mg33125__35)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getAllResourceFiles())).isEmpty());
        JDocComment o_testOnClass_mg147_mg33125__36 = cls.headerComment();
        Assert.assertTrue(o_testOnClass_mg147_mg33125__36.isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertTrue(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg147_mg33125__8);
        Assert.assertTrue(o_testOnClass_mg147_mg33125__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg147_mg33125__20);
        Assert.assertTrue(o_testOnClass_mg147_mg33125__22);
        Assert.assertTrue(o_testOnClass_mg147_mg33125__25);
        Assert.assertTrue(o_testOnClass_mg147_mg33125__28);
        Assert.assertTrue(o_testOnClass_mg147_mg33125__31);
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (o_testOnClass_mg147_mg33125__35)).isPackage());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg147_mg33125__35)).isClass());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg147_mg33125__35)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (o_testOnClass_mg147_mg33125__35)).getAllResourceFiles())).isEmpty());
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString49_mg13073() throws Exception {
        String __DSPOT_sName_3277 = "m03_:>=qu>]:/|_+/xR4";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString49_mg13073__8 = cls.javadoc().add("Class com_ent");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__8);
        boolean o_testOnClass_literalMutationString49_mg13073__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString49_mg13073__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__20);
        boolean o_testOnClass_literalMutationString49_mg13073__22 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__22);
        boolean o_testOnClass_literalMutationString49_mg13073__25 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__25);
        boolean o_testOnClass_literalMutationString49_mg13073__28 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__28);
        boolean o_testOnClass_literalMutationString49_mg13073__31 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__31);
        CodeModelTestsHelper.parseCodeModel(cm);
        JEnumConstant o_testOnClass_literalMutationString49_mg13073__35 = cls.enumConstant(__DSPOT_sName_3277);
        Assert.assertEquals(-706630097, ((int) (((JEnumConstant) (o_testOnClass_literalMutationString49_mg13073__35)).hashCode())));
        Assert.assertFalse(((JEnumConstant) (o_testOnClass_literalMutationString49_mg13073__35)).hasArgs());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__8);
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__20);
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__22);
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__25);
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__28);
        Assert.assertTrue(o_testOnClass_literalMutationString49_mg13073__31);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg166_rv22378() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg166_rv22378__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__7);
        boolean o_testOnClass_mg166_rv22378__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg166_rv22378__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__19);
        boolean o_testOnClass_mg166_rv22378__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__21);
        boolean o_testOnClass_mg166_rv22378__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__24);
        boolean o_testOnClass_mg166_rv22378__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__27);
        boolean o_testOnClass_mg166_rv22378__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg166_rv22378__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        JBlock __DSPOT_invoc_34 = cls.init();
        __DSPOT_invoc_34._return();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg166_rv22378__7);
        Assert.assertTrue(o_testOnClass_mg166_rv22378__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg166_rv22378__19);
        Assert.assertTrue(o_testOnClass_mg166_rv22378__21);
        Assert.assertTrue(o_testOnClass_mg166_rv22378__24);
        Assert.assertTrue(o_testOnClass_mg166_rv22378__27);
        Assert.assertTrue(o_testOnClass_mg166_rv22378__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_add3_mg31670_failAssert0() throws Exception {
        try {
            int __DSPOT_nMods_8090 = 1029674573;
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "any");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value plus \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag("since").add("JCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            cls.constructor(__DSPOT_nMods_8090);
            org.junit.Assert.fail("testOnClass_add3_mg31670 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_mg125null37226_failAssert0() throws Exception {
        try {
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "any");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value plus \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag(null).add("JCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            cm.packages();
            org.junit.Assert.fail("testOnClass_mg125null37226 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("The value of \'Name\' may not be null!", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString80_mg11237() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString80_mg11237__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__7);
        boolean o_testOnClass_literalMutationString80_mg11237__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString80_mg11237__19 = method.javadoc().add("Desc;ription");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__19);
        boolean o_testOnClass_literalMutationString80_mg11237__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__21);
        boolean o_testOnClass_literalMutationString80_mg11237__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__24);
        boolean o_testOnClass_literalMutationString80_mg11237__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__27);
        boolean o_testOnClass_literalMutationString80_mg11237__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnClass_literalMutationString80_mg11237__34 = cm.buildsErrorTypeRefs();
        Assert.assertFalse(o_testOnClass_literalMutationString80_mg11237__34);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__7);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__19);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__21);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__24);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__27);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg11237__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString80_mg19314() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString80_mg19314__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__7);
        boolean o_testOnClass_literalMutationString80_mg19314__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString80_mg19314__19 = method.javadoc().add("Desc;ription");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__19);
        boolean o_testOnClass_literalMutationString80_mg19314__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__21);
        boolean o_testOnClass_literalMutationString80_mg19314__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__24);
        boolean o_testOnClass_literalMutationString80_mg19314__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__27);
        boolean o_testOnClass_literalMutationString80_mg19314__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        AbstractJClass o_testOnClass_literalMutationString80_mg19314__34 = cm.wildcard();
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isInterface());
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isAbstract());
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isError());
        Assert.assertEquals("com.helger.jcodemodel.JTypeWildcard(? extends java.lang.Object)", ((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).toString());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).getPrimitiveType());
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isParameterized());
        Assert.assertTrue(((Collection) (((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isArray());
        Assert.assertFalse(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isPrimitive());
        Assert.assertTrue(((JTypeWildcard) (o_testOnClass_literalMutationString80_mg19314__34)).isReference());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__7);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__19);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__21);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__24);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__27);
        Assert.assertTrue(o_testOnClass_literalMutationString80_mg19314__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg135_literalMutationString32386_failAssert0() throws Exception {
        try {
            IJFormatter __DSPOT_f_22 = null;
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "any");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value pl!s \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag("since").add("JCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            pkg.generate(__DSPOT_f_22);
            org.junit.Assert.fail("testOnClass_mg135_literalMutationString32386 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString40_mg17264() throws Exception {
        String __DSPOT_sName_4382 = ">Yl9{el)z]@9DS^=MCqz";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("fo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(fo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString40_mg17264__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__8);
        boolean o_testOnClass_literalMutationString40_mg17264__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString40_mg17264__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__20);
        boolean o_testOnClass_literalMutationString40_mg17264__22 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__22);
        boolean o_testOnClass_literalMutationString40_mg17264__25 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__25);
        boolean o_testOnClass_literalMutationString40_mg17264__28 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__28);
        boolean o_testOnClass_literalMutationString40_mg17264__31 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__31);
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnClass_literalMutationString40_mg17264__35 = pkg.hasResourceFile(__DSPOT_sName_4382);
        Assert.assertFalse(o_testOnClass_literalMutationString40_mg17264__35);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(fo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__8);
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__20);
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__22);
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__25);
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__28);
        Assert.assertTrue(o_testOnClass_literalMutationString40_mg17264__31);
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString68_mg23438() throws Exception {
        AbstractJType[] __DSPOT_argTypes_5981 = new AbstractJType[]{  };
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString68_mg23438__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__8);
        boolean o_testOnClass_literalMutationString68_mg23438__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "Left");
        Assert.assertEquals(-1826039845, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString68_mg23438__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__20);
        boolean o_testOnClass_literalMutationString68_mg23438__22 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__22);
        boolean o_testOnClass_literalMutationString68_mg23438__25 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__25);
        boolean o_testOnClass_literalMutationString68_mg23438__28 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__28);
        boolean o_testOnClass_literalMutationString68_mg23438__31 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__31);
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnClass_literalMutationString68_mg23438__35 = method.hasSignature(__DSPOT_argTypes_5981);
        Assert.assertFalse(o_testOnClass_literalMutationString68_mg23438__35);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__8);
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1826039845, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__20);
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__22);
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__25);
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__28);
        Assert.assertTrue(o_testOnClass_literalMutationString68_mg23438__31);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg198_literalMutationString12929_failAssert0() throws Exception {
        try {
            String __DSPOT_sName_44 = ":PDcJ+3%i%O4t]/|:Izr";
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "any");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value plus \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag("since").add("PCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            aParam.name(__DSPOT_sName_44);
            org.junit.Assert.fail("testOnClass_mg198_literalMutationString12929 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_mg192_literalMutationString25398_failAssert0() throws Exception {
        try {
            IJFormatter __DSPOT_f_41 = null;
            final JCodeModel cm = new JCodeModel();
            final JPackage pkg = cm._package("foo");
            final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
            cls.javadoc().add("Class comment");
            cls.javadoc().addAuthor().add("JavadocFuncTest");
            final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
            final JVar aParam = method.param(String.class, "");
            method.body()._return(aParam.plus("X"));
            method.javadoc().add("Description");
            method.javadoc().addParam(aParam).add("Input value");
            method.javadoc().addReturn().add("Input value plus \"X\".");
            method.javadoc().addThrows(NullPointerException.class).add("If input is null");
            method.javadoc().addTag("since").add("JCodeModel 2.8.5");
            CodeModelTestsHelper.parseCodeModel(cm);
            aParam.declare(__DSPOT_f_41);
            org.junit.Assert.fail("testOnClass_mg192_literalMutationString25398 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("The expression must be true but it is not: Illegal variable name \'\'", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testOnClass_mg170_literalMutationString34391() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg170_literalMutationString34391__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__7);
        boolean o_testOnClass_mg170_literalMutationString34391__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg170_literalMutationString34391__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__19);
        boolean o_testOnClass_mg170_literalMutationString34391__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__21);
        boolean o_testOnClass_mg170_literalMutationString34391__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__24);
        boolean o_testOnClass_mg170_literalMutationString34391__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__27);
        boolean o_testOnClass_mg170_literalMutationString34391__30 = method.javadoc().addTag("sin?ce").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        JMods o_testOnClass_mg170_literalMutationString34391__34 = cls.mods();
        Assert.assertEquals(9, ((int) (((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).getValue())));
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isStatic());
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isDefault());
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isAbstract());
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isNative());
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isSynchronized());
        Assert.assertFalse(((JMods) (o_testOnClass_mg170_literalMutationString34391__34)).isStrictFP());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__7);
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__19);
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__21);
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__24);
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__27);
        Assert.assertTrue(o_testOnClass_mg170_literalMutationString34391__30);
    }

    @Test(timeout = 10000)
    public void testOnClass_rv216_rv15849() throws Exception {
        double __DSPOT_rhs_3999 = 0.5300058441883073;
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_rv216_rv15849__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__8);
        boolean o_testOnClass_rv216_rv15849__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        JReturn __DSPOT_invoc_16 = method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_rv216_rv15849__22 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__22);
        boolean o_testOnClass_rv216_rv15849__24 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__24);
        boolean o_testOnClass_rv216_rv15849__27 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__27);
        boolean o_testOnClass_rv216_rv15849__30 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__30);
        boolean o_testOnClass_rv216_rv15849__33 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_rv216_rv15849__33);
        CodeModelTestsHelper.parseCodeModel(cm);
        IJExpression __DSPOT_invoc_36 = __DSPOT_invoc_16.expr();
        IJExpression o_testOnClass_rv216_rv15849__40 = __DSPOT_invoc_36.div(__DSPOT_rhs_3999);
        Assert.assertEquals(-1833524852, ((int) (((JOpBinary) (o_testOnClass_rv216_rv15849__40)).hashCode())));
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_rv216_rv15849__8);
        Assert.assertTrue(o_testOnClass_rv216_rv15849__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_rv216_rv15849__22);
        Assert.assertTrue(o_testOnClass_rv216_rv15849__24);
        Assert.assertTrue(o_testOnClass_rv216_rv15849__27);
        Assert.assertTrue(o_testOnClass_rv216_rv15849__30);
        Assert.assertTrue(o_testOnClass_rv216_rv15849__33);
    }

    @Test(timeout = 10000)
    public void testOnClass_mg160_mg29025() throws Exception {
        String __DSPOT_sSubPackageName_7435 = "f`p%/)GPBE:/crY|*an-";
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_mg160_mg29025__8 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__8);
        boolean o_testOnClass_mg160_mg29025__10 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__10);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_mg160_mg29025__20 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__20);
        boolean o_testOnClass_mg160_mg29025__22 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__22);
        boolean o_testOnClass_mg160_mg29025__25 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__25);
        boolean o_testOnClass_mg160_mg29025__28 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__28);
        boolean o_testOnClass_mg160_mg29025__31 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_mg160_mg29025__31);
        CodeModelTestsHelper.parseCodeModel(cm);
        Map<String, JFieldVar> o_testOnClass_mg160_mg29025__35 = cls.fields();
        Assert.assertTrue(o_testOnClass_mg160_mg29025__35.isEmpty());
        JPackage o_testOnClass_mg160_mg29025__36 = pkg.subPackage(__DSPOT_sSubPackageName_7435);
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (o_testOnClass_mg160_mg29025__36)).isPackage());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg160_mg29025__36)).isClass());
        Assert.assertFalse(((JPackage) (o_testOnClass_mg160_mg29025__36)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (o_testOnClass_mg160_mg29025__36)).getAllResourceFiles())).isEmpty());
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_mg160_mg29025__8);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__10);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_mg160_mg29025__20);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__22);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__25);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__28);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__31);
        Assert.assertTrue(o_testOnClass_mg160_mg29025__35.isEmpty());
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString72_mg31964() throws Exception {
        Object __DSPOT_o_8187 = new Object();
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString72_mg31964__9 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__9);
        boolean o_testOnClass_literalMutationString72_mg31964__11 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__11);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "getPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "aYny");
        Assert.assertEquals(-1825425513, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString72_mg31964__21 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__21);
        boolean o_testOnClass_literalMutationString72_mg31964__23 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__23);
        boolean o_testOnClass_literalMutationString72_mg31964__26 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__26);
        boolean o_testOnClass_literalMutationString72_mg31964__29 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__29);
        boolean o_testOnClass_literalMutationString72_mg31964__32 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__32);
        CodeModelTestsHelper.parseCodeModel(cm);
        boolean o_testOnClass_literalMutationString72_mg31964__36 = aParam.equals(__DSPOT_o_8187);
        Assert.assertFalse(o_testOnClass_literalMutationString72_mg31964__36);
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__9);
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__11);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1825425513, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__21);
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__23);
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__26);
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__29);
        Assert.assertTrue(o_testOnClass_literalMutationString72_mg31964__32);
    }

    @Test(timeout = 10000)
    public void testOnClass_literalMutationString62_mg2707() throws Exception {
        final JCodeModel cm = new JCodeModel();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        final JPackage pkg = cm._package("foo");
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        final JDefinedClass cls = pkg._class(((JMod.PUBLIC) | (JMod.FINAL)), "Dummy");
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertFalse(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        boolean o_testOnClass_literalMutationString62_mg2707__7 = cls.javadoc().add("Class comment");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__7);
        boolean o_testOnClass_literalMutationString62_mg2707__9 = cls.javadoc().addAuthor().add("JavadocFuncTest");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__9);
        final JMethod method = cls.method(((JMod.PUBLIC) | (JMod.STATIC)), String.class, "gletPlusX");
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        final JVar aParam = method.param(String.class, "any");
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        method.body()._return(aParam.plus("X"));
        boolean o_testOnClass_literalMutationString62_mg2707__19 = method.javadoc().add("Description");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__19);
        boolean o_testOnClass_literalMutationString62_mg2707__21 = method.javadoc().addParam(aParam).add("Input value");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__21);
        boolean o_testOnClass_literalMutationString62_mg2707__24 = method.javadoc().addReturn().add("Input value plus \"X\".");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__24);
        boolean o_testOnClass_literalMutationString62_mg2707__27 = method.javadoc().addThrows(NullPointerException.class).add("If input is null");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__27);
        boolean o_testOnClass_literalMutationString62_mg2707__30 = method.javadoc().addTag("since").add("JCodeModel 2.8.5");
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__30);
        CodeModelTestsHelper.parseCodeModel(cm);
        cls.hide();
        Assert.assertNull(((JCodeModel) (cm)).getBuildingCharset());
        Assert.assertEquals("\n", ((JCodeModel) (cm)).getBuildingNewLine());
        Assert.assertTrue(((Collection) (((JCodeModel) (cm)).getAllDontImportClasses())).isEmpty());
        Assert.assertFalse(((Collection) (((JCodeModel) (cm)).getAllPackages())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JPackage) (pkg)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JPackage) (pkg)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (pkg)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (pkg)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (pkg)).isPackage());
        Assert.assertFalse(((JPackage) (pkg)).isClass());
        Assert.assertFalse(((JPackage) (pkg)).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (pkg)).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isAbstract());
        Assert.assertTrue(((JDefinedClass) (cls)).isHidden());
        Assert.assertFalse(((JDefinedClass) (cls)).hasHeaderComment());
        Assert.assertFalse(((JDefinedClass) (cls)).isInterface());
        Assert.assertTrue(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((JPackage) (((JDefinedClass) (cls)).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((JDefinedClass) (cls)).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((JDefinedClass) (cls)).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isPackage());
        Assert.assertTrue(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isPackage());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isClass());
        Assert.assertFalse(((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).isUnnamed());
        Assert.assertTrue(((Collection) (((JPackage) (((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).getPackage())).getAllResourceFiles())).isEmpty());
        Assert.assertTrue(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isPackage());
        Assert.assertFalse(((IJClassContainer) (((JDefinedClass) (cls)).getOuter())).isClass());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnnotationTypeDeclaration());
        Assert.assertFalse(((JDefinedClass) (cls)).isAnonymous());
        Assert.assertTrue(((JDefinedClass) (cls)).isClass());
        Assert.assertEquals("com.helger.jcodemodel.JDefinedClass(foo.Dummy)", ((JDefinedClass) (cls)).toString());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getTypeParameters())).isEmpty());
        Assert.assertNull(((JDefinedClass) (cls)).getPrimitiveType());
        Assert.assertFalse(((JDefinedClass) (cls)).isParameterized());
        Assert.assertTrue(((Collection) (((JDefinedClass) (cls)).getAllInnerClasses())).isEmpty());
        Assert.assertFalse(((JDefinedClass) (cls)).isArray());
        Assert.assertFalse(((JDefinedClass) (cls)).isPrimitive());
        Assert.assertFalse(((JDefinedClass) (cls)).isError());
        Assert.assertTrue(((JDefinedClass) (cls)).isReference());
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__7);
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__9);
        Assert.assertFalse(((JMethod) (method)).isConstructor());
        Assert.assertFalse(((JMethod) (method)).hasVarArgs());
        Assert.assertTrue(((JMethod) (method)).getThrows().isEmpty());
        Assert.assertEquals(-1828307552, ((int) (((JVar) (aParam)).hashCode())));
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__19);
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__21);
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__24);
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__27);
        Assert.assertTrue(o_testOnClass_literalMutationString62_mg2707__30);
    }
}

